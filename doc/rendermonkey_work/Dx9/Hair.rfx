<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!DOCTYPE RENDER_MONKEY [
   <!ELEMENT RENDER_MONKEY
   (
      RmEffectWorkspace |
      RmRegistryBranch |
      RmClipboardNode
   )?>

   <!ELEMENT RmEffectWorkspace 
   (
      RmRegistryBranch?,
      RmPlugInData?,
      RmStringVariable*,
      (
         ( RmDirectXEffect, RmOpenGLEffect?, RmOpenGLESEffect? ) |
         ( RmOpenGLEffect, RmDirectXEffect?, RmOpenGLESEffect? ) |
         ( RmOpenGLESEffect, RmDirectXEffect?, RmOpenGLEffect? )
      )?,
      (
         RmBooleanVariable |
         RmIntegerVariable |
         RmFloatVariable |
         RmVectorVariable |
         RmMatrixVariable |
         RmDynamicVariable |
         RmColorVariable |
         Rm2DTextureVariable |
         RmCubemapVariable |
         Rm3DTextureVariable |
         RmLightVariable |
         RmMaterialVariable |
         RmRenderableTexture |
         RmStreamMap |
         RmModelData |
         RmEffectGroup
      )*
   )>

   <!ELEMENT RmEffectGroup
   ( 
      RmPlugInData?,
      (
         RmStringVariable |
         RmDirectXEffect |
         RmOpenGLEffect |
         RmOpenGLESEffect |
         RmBooleanVariable |
         RmIntegerVariable |
         RmFloatVariable |
         RmVectorVariable |
         RmMatrixVariable |
         RmDynamicVariable |
         RmColorVariable |
         Rm2DTextureVariable |
         RmCubemapVariable |
         Rm3DTextureVariable |
         RmLightVariable |
         RmMaterialVariable |
         RmRenderableTexture |
         RmStreamMap |
         RmModelData
      )*
   )>

   <!ELEMENT RmDirectXEffect
   ( 
      RmPlugInData?,
      (
         RmStringVariable |
         RmCamera |
         RmBooleanVariable |
         RmIntegerVariable |
         RmFloatVariable |
         RmVectorVariable |
         RmMatrixVariable |
         RmDynamicVariable |
         RmColorVariable |
         Rm2DTextureVariable |
         RmCubemapVariable |
         Rm3DTextureVariable |
         RmLightVariable |
         RmMaterialVariable |
         RmRenderableTexture |
         RmStreamMap |
         RmModelData |
         RmPass
      )*
   )>

   <!ELEMENT RmOpenGLEffect
   (
      RmPlugInData?,
      (
         RmStringVariable |
         RmCamera |
         RmBooleanVariable |
         RmIntegerVariable |
         RmFloatVariable |
         RmVectorVariable |
         RmMatrixVariable |
         RmDynamicVariable |
         RmColorVariable |
         Rm2DTextureVariable |
         RmCubemapVariable |
         Rm3DTextureVariable |
         RmLightVariable |
         RmMaterialVariable |
         RmRenderableTexture |
         RmStreamMap |
         RmModelData |
         RmGLPass
      )*
   )>
   
   <!ELEMENT RmOpenGLESEffect
   (
      RmPlugInData?,
      (
         RmStringVariable |
         RmCamera |
         RmBooleanVariable |
         RmIntegerVariable |
         RmFloatVariable |
         RmVectorVariable |
         RmMatrixVariable |
         RmDynamicVariable |
         RmColorVariable |
         Rm2DTextureVariable |
         RmCubemapVariable |
         Rm3DTextureVariable |
         RmLightVariable |
         RmMaterialVariable |
         RmRenderableTexture |
         RmStreamMap |
         RmModelData |
         RmGLESPass
      )*
   )>

   <!ELEMENT RmPass
   ( 
      RmPlugInData?,
      RmStringVariable*,
      RmCameraReference?,
      RmModelReference?,
      RmRenderStateBlock?,
      (
         (
         ( RmHLSLShader | RmShader ),
         ( RmShader | RmHLSLShader )?
         )
      )?,
      RmRenderTarget*,
      RmStreamMapReference?,
      (
         RmBooleanVariable |
         RmIntegerVariable |
         RmFloatVariable |
         RmVectorVariable |
         RmMatrixVariable |
         RmDynamicVariable |
         RmColorVariable |
         Rm2DTextureVariable |
         RmCubemapVariable |
         Rm3DTextureVariable |
         RmLightVariable |
         RmMaterialVariable |
         RmTextureObject |
         RmLightObject |
         RmMaterialObject
         )*
      )>
                                                                     
   <!ELEMENT RmGLPass
   ( 
      RmPlugInData?,
      RmStringVariable*,
      RmCameraReference?,
      RmModelReference?,
      RmRenderStateBlock?,
      (
         ( RmGLShader, RmGLShader? ) 
      )?,
      RmRenderTarget?,
      RmStreamMapReference?,
      (
         RmBooleanVariable |
         RmIntegerVariable |
         RmFloatVariable |
         RmVectorVariable |
         RmMatrixVariable |
         RmDynamicVariable |
         RmColorVariable |
         Rm2DTextureVariable |
         RmCubemapVariable |
         Rm3DTextureVariable |
         RmLightVariable |
         RmMaterialVariable |
         RmTextureObject |
         RmLightObject |
         RmMaterialObject |
         RmShaderConstant |
         RmSampler
         )*
      )>

   <!ELEMENT RmGLESPass
   ( 
      RmPlugInData?,
      RmStringVariable*,
      RmCameraReference?,
      RmModelReference?,
      RmRenderStateBlock?,
      (
         ( RmGLESShader, RmGLESShader? ) 
      )?,
      RmRenderTarget?,
      RmStreamMapReference?,
      (
         RmBooleanVariable |
         RmIntegerVariable |
         RmFloatVariable |
         RmVectorVariable |
         RmMatrixVariable |
         RmDynamicVariable |
         RmColorVariable |
         Rm2DTextureVariable |
         RmCubemapVariable |
         Rm3DTextureVariable |
         RmLightVariable |
         RmMaterialVariable |
         RmTextureObject |
         RmLightObject |
         RmMaterialObject |
         RmShaderConstant |
         RmSampler
         )*
      )>      
      
   <!ELEMENT RmShader
   ( 
      RmShaderCode,
      RmPlugInData?,
      (
      RmStringVariable |
      RmShaderConstant
      )*
   )>

   <!ELEMENT RmHLSLShader
   ( 
      RmShaderCode,
      RmPlugInData?,
      (
      RmStringVariable |
      RmShaderConstant |
      RmSampler
      )*
   )>

   <!ELEMENT RmGLShader
   ( 
      RmShaderCode,
      RmPlugInData?,
      (
      RmStringVariable
      )*
   )>

   <!ELEMENT RmGLESShader
   ( 
      RmShaderCode,
      RmPlugInData?,
      (
      RmStringVariable
      )*
   )>
   
   <!ELEMENT RmTextureObject
   (
      RmPlugInData?,
      RmStringVariable*,
      RmTextureReference?,
      RmState*
   )>

   <!ELEMENT RmLightObject
   (
      RmPlugInData?,
      RmStringVariable*,
      RmLightReference?
   )>
   
   <!ELEMENT RmMaterialObject
   (
      RmPlugInData?,
      RmStringVariable*,
      RmMaterialReference?
   )>
   
   <!ELEMENT RmRenderStateBlock
   (
      RmPlugInData?,
      (
         RmStringVariable |
         RmState 
      )*
   )>

   <!ELEMENT RmStreamMap
   (
      RmPlugInData?,
      (
         RmStringVariable |
         RmStream 
      )*
   )>

   <!ELEMENT RmStream               ( RmPlugInData?, RmStreamChannel* )>

   <!ELEMENT RmModelData            ( RmPlugInData?, RmStringVariable* )>  
   <!ELEMENT RmTextureReference     ( RmPlugInData?, RmStringVariable* )>
   <!ELEMENT RmLightReference       ( RmPlugInData?, RmStringVariable* )>
   <!ELEMENT RmMaterialReference    ( RmPlugInData?, RmStringVariable* )>
   <!ELEMENT RmCameraReference      ( RmPlugInData?, RmStringVariable* )>
   <!ELEMENT RmModelReference       ( RmPlugInData?, RmStringVariable* )>
   <!ELEMENT RmStreamMapReference   ( RmPlugInData?, RmStringVariable* )>   
   <!ELEMENT RmRenderableTexture    ( RmPlugInData?, RmStringVariable* )>   
   <!ELEMENT RmRenderTarget         ( RmPlugInData?, RmStringVariable* )>   
   <!ELEMENT RmBooleanVariable      ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT RmFloatVariable        ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT RmVectorVariable       ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT RmMatrixVariable       ( RmPlugInData?, RmStringVariable? )>   
   <!ELEMENT RmColorVariable        ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT RmIntegerVariable      ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT Rm2DTextureVariable    ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT RmCubemapVariable      ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT Rm3DTextureVariable    ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT RmLightVariable        ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT RmMaterialVariable     ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT RmCamera               ( RmPlugInData?, RmStringVariable* )>

   <!ELEMENT RmStringVariable       ( RmTextDataBlock, RmPlugInData? )>
   
   <!ELEMENT RmDynamicVariable
   (
      RmDynamicVariableValueContainer,
      RmPlugInData?,
      RmStringVariable?
   )>
   
   <!ELEMENT RmDynamicVariableValueContainer
   (
      RmPlugInData?,
      RmDynamicVariableValue*
   )>
   
   <!ELEMENT RmTextDataBlock        ( #PCDATA ) >
   
   <!ELEMENT RmRegistryBranch
   ( 
      RmTextDataBlock?,
      (
         RmRegistryBranch |
         RmStringVariable |
         RmIntegerVariable |
         RmBooleanVariable |
         RmFloatVariable
      )*      
   )>

   <!ELEMENT RmPlugInData
   ( 
      RmTextDataBlock?,
      (
         RmStringVariable |
         RmIntegerVariable |
         RmBooleanVariable |
         RmFloatVariable |
         RmVectorVariable
      )*      
   )>
   
   <!ELEMENT RmClipboardNode
   (
      RmTextDataBlock?,
      (
         RmEffectWorkspace |
         RmEffectGroup |
         RmDirectXEffect |
         RmOpenGLEffect |
         RmOpenGLESEffect |
         RmPass |
         RmGLPass |
         RmGLESPass |
         RmShader |
         RmHLSLShader |
         RmGLShader |
         RmGLESShader |
         RmShaderConstant |
         RmSampler |
         RmTextureObject |
         RmLightObject |
         RmMaterialObject |
         RmRenderStateBlock |
         RmState |
         RmStreamMap |
         RmStream |
         RmStreamChannel |
         RmModelData |
         RmTextureReference |
         RmLightReference |
         RmMaterialReference |
         RmModelReference |
         RmStreamMapReference |
         RmRenderableTexture |
         RmRenderTarget |
         RmBooleanVariable |
         RmFloatVariable |
         RmVectorVariable |
         RmMatrixVariable |
         RmDynamicVariable |
         RmDynamicVariableValue |
         RmColorVariable |
         RmIntegerVariable |
         RmStringVariable |
         Rm2DTextureVariable |
         RmCubemapVariable |
         Rm3DTextureVariable |
         RmLightVariable |
         RmMaterialVariable |
         RmRegistryBranch |
         RmPlugInData |
         RmCamera |
         RmCameraReference
      )*      
   )>
   
   <!ELEMENT RmStreamChannel        ( RmPlugInData? ) >
   <!ELEMENT RmShaderConstant       ( RmPlugInData? ) >
   <!ELEMENT RmSampler              ( RmPlugInData? ) >
   <!ELEMENT RmState                ( RmPlugInData? ) >
   <!ELEMENT RmDynamicVariableValue ( RmPlugInData? ) >
   
   <!ELEMENT RmShaderCode           ( #PCDATA ) >

   <!ATTLIST RmEffectWorkspace 
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ACTIVE_EFFECT                 CDATA #REQUIRED
      VALIDATION_STRING             CDATA #REQUIRED
      XML_VERSION                   CDATA #REQUIRED
   >                                 

   <!ATTLIST RmEffectGroup           
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
   >                                 

   <!ATTLIST RmDirectXEffect                
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ACTIVE_CAMERA                 CDATA #REQUIRED
   >                                 

   <!ATTLIST RmOpenGLEffect                
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ACTIVE_CAMERA                 CDATA #REQUIRED
   >                                 
   
   <!ATTLIST RmOpenGLESEffect                
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ACTIVE_CAMERA                 CDATA #REQUIRED
   >                                 

   <!ATTLIST RmPass                  
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      PASS_INDEX                    CDATA #REQUIRED
      ENABLED                       ( TRUE | FALSE ) #REQUIRED
   >                                 

   <!ATTLIST RmGLPass                  
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      PASS_INDEX                    CDATA #REQUIRED
      ENABLED                       ( TRUE | FALSE ) #REQUIRED
   >                                 
   
   <!ATTLIST RmGLESPass                  
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      PASS_INDEX                    CDATA #REQUIRED
      ENABLED                       ( TRUE | FALSE ) #REQUIRED
   >                                 
   
   <!ATTLIST RmShader        
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      PIXEL_SHADER                  CDATA #REQUIRED
   >                                 

   <!ATTLIST RmHLSLShader        
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      PIXEL_SHADER                  ( TRUE | FALSE ) #REQUIRED
      TARGET                        CDATA #REQUIRED
      ENTRY_POINT                   CDATA #REQUIRED
      COMPILER_FLAGS                CDATA #REQUIRED
   >  

   <!ATTLIST RmGLShader        
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      PIXEL_SHADER                  ( TRUE | FALSE ) #REQUIRED
   >  
   
   <!ATTLIST RmGLESShader        
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      PIXEL_SHADER                  ( TRUE | FALSE ) #REQUIRED
   >  

   <!ATTLIST RmShaderConstant
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      REGISTER                      CDATA #REQUIRED
   >                                 

   <!ATTLIST RmSampler               
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      REGISTER                      CDATA #REQUIRED
   >

   <!ATTLIST RmTextureObject
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      STATE_INDEX                   CDATA #REQUIRED
      VERTEX_TEXTURE                ( TRUE | FALSE ) #REQUIRED
   >

   <!ATTLIST RmLightObject
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      INDEX                         CDATA #REQUIRED
   >
   
   <!ATTLIST RmMaterialObject
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      INDEX                         CDATA #REQUIRED
   >
   
   <!ATTLIST RmRenderStateBlock
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
   >                                 

   <!ATTLIST RmState                 
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      STATE                         CDATA #REQUIRED
      VALUE                         CDATA #REQUIRED
      USAGE                         CDATA #REQUIRED
   >                               

   <!ATTLIST RmStreamMap           
     NAME                           CDATA #REQUIRED
     API                            CDATA #REQUIRED
   >                               

   <!ATTLIST RmStream              
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      STRIDE                        CDATA #REQUIRED
   >

   <!ATTLIST RmStreamChannel
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      DATA_SIZE                     CDATA #REQUIRED
      DATA_TYPE                     CDATA #REQUIRED
      REGISTER                      CDATA #REQUIRED
      USAGE                         CDATA #REQUIRED
      USAGE_INDEX                   CDATA #REQUIRED
      ATTRIBUTE_NAME                CDATA #REQUIRED
   >

   <!ATTLIST RmModelData
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      FILE_NAME                     CDATA #REQUIRED
      ORIENTATION                   CDATA #REQUIRED
   >

   <!ATTLIST RmTextureReference
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
   >

   <!ATTLIST RmLightReference
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
   >
   
   <!ATTLIST RmMaterialReference
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
   >
   
   <!ATTLIST RmModelReference
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
   >

   <!ATTLIST RmStreamMapReference
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
   >

   <!ATTLIST RmRenderableTexture
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      FILE_NAME                     CDATA #REQUIRED
      ORIGIN                        CDATA #REQUIRED
      WIDTH                         CDATA #REQUIRED
      HEIGHT                        CDATA #REQUIRED
      FORMAT                        CDATA #REQUIRED
      USE_VIEWPORT_DIMENSIONS       ( TRUE | FALSE ) #REQUIRED
      GENERATE_MIPMAPS              ( TRUE | FALSE ) #REQUIRED
      WIDTH_RATIO                   CDATA #REQUIRED
      HEIGHT_RATIO                  CDATA #REQUIRED
   >

   <!ATTLIST RmRenderTarget
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      INDEX                         CDATA #REQUIRED
      RENDER_TO_SCREEN              ( TRUE | FALSE ) #REQUIRED
      COLOR_CLEAR                   ( TRUE | FALSE ) #REQUIRED
      DEPTH_CLEAR                   ( TRUE | FALSE ) #REQUIRED
      CLEAR_COLOR_VALUE             CDATA #REQUIRED
      DEPTH_CLEAR_VALUE             CDATA #REQUIRED
   >
   
   <!ATTLIST RmBooleanVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      VALUE                         CDATA #REQUIRED
   >

   <!ATTLIST RmFloatVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      VALUE                         CDATA #REQUIRED
      MIN                           CDATA #REQUIRED
      MAX                           CDATA #REQUIRED
      CLAMP                         ( TRUE | FALSE ) #REQUIRED
   >

   <!ATTLIST RmVectorVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      VALUE_0                       CDATA #REQUIRED
      VALUE_1                       CDATA #REQUIRED
      VALUE_2                       CDATA #REQUIRED
      VALUE_3                       CDATA #REQUIRED
      MIN                           CDATA #REQUIRED
      MAX                           CDATA #REQUIRED
      CLAMP                         ( TRUE | FALSE ) #REQUIRED
      NORMALIZE                     ( TRUE | FALSE ) #REQUIRED
   >

   <!ATTLIST RmMatrixVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      VALUE_0                       CDATA #REQUIRED
      VALUE_1                       CDATA #REQUIRED
      VALUE_2                       CDATA #REQUIRED
      VALUE_3                       CDATA #REQUIRED
      VALUE_4                       CDATA #REQUIRED
      VALUE_5                       CDATA #REQUIRED
      VALUE_6                       CDATA #REQUIRED
      VALUE_7                       CDATA #REQUIRED
      VALUE_8                       CDATA #REQUIRED
      VALUE_9                       CDATA #REQUIRED
      VALUE_10                      CDATA #REQUIRED
      VALUE_11                      CDATA #REQUIRED
      VALUE_12                      CDATA #REQUIRED
      VALUE_13                      CDATA #REQUIRED
      VALUE_14                      CDATA #REQUIRED
      VALUE_15                      CDATA #REQUIRED
   >

   <!ATTLIST RmDynamicVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      VARIABLE_TYPE                 ( FLOAT | INTEGER | BOOLEAN ) #REQUIRED
      ROWS                          CDATA #REQUIRED
      COLUMNS                       CDATA #REQUIRED
      FIXED_SIZE                    ( TRUE | FALSE ) #REQUIRED
      MIN                           CDATA #REQUIRED
      MAX                           CDATA #REQUIRED
      CLAMP                         ( TRUE | FALSE ) #REQUIRED
      NORMALIZE                     ( TRUE | FALSE ) #REQUIRED
   >
   
   <!ATTLIST RmDynamicVariableValue
      ROW_INDEX                     CDATA #REQUIRED
      COLUMN_INDEX                  CDATA #REQUIRED
      VALUE                         CDATA #REQUIRED
   >
   
   <!ATTLIST RmColorVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      VALUE_0                       CDATA #REQUIRED
      VALUE_1                       CDATA #REQUIRED
      VALUE_2                       CDATA #REQUIRED
      VALUE_3                       CDATA #REQUIRED
   >

   <!ATTLIST RmIntegerVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      VALUE                         CDATA #REQUIRED
      MIN                           CDATA #REQUIRED
      MAX                           CDATA #REQUIRED
      CLAMP                         ( TRUE | FALSE ) #REQUIRED
   >
   
   <!ATTLIST RmStringVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
   >

   <!ATTLIST Rm2DTextureVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      FILE_NAME                     CDATA #REQUIRED
      ORIGIN                        CDATA #REQUIRED
   >

   <!ATTLIST RmCubemapVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      FILE_NAME                     CDATA #REQUIRED
      ORIGIN                        CDATA #REQUIRED
   >

   <!ATTLIST Rm3DTextureVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      FILE_NAME                     CDATA #REQUIRED
      ORIGIN                        CDATA #REQUIRED
   >

   <!ATTLIST RmLightVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      LIGHT_ENABLED                 ( TRUE | FALSE ) #REQUIRED
      LIGHT_TYPE                    ( POSITIONAL | DIRECTIONAL | SPOTLIGHT ) #REQUIRED
      AMBIENT_0                     CDATA #REQUIRED
      AMBIENT_1                     CDATA #REQUIRED
      AMBIENT_2                     CDATA #REQUIRED
      AMBIENT_3                     CDATA #REQUIRED
      DIFFUSE_0                     CDATA #REQUIRED
      DIFFUSE_1                     CDATA #REQUIRED
      DIFFUSE_2                     CDATA #REQUIRED
      DIFFUSE_3                     CDATA #REQUIRED
      SPECULAR_0                    CDATA #REQUIRED
      SPECULAR_1                    CDATA #REQUIRED
      SPECULAR_2                    CDATA #REQUIRED
      SPECULAR_3                    CDATA #REQUIRED
      POSITION_0                    CDATA #REQUIRED
      POSITION_1                    CDATA #REQUIRED
      POSITION_2                    CDATA #REQUIRED
      DIRECTION_0                   CDATA #REQUIRED
      DIRECTION_1                   CDATA #REQUIRED
      DIRECTION_2                   CDATA #REQUIRED
      ATTENUATION_0                 CDATA #REQUIRED
      ATTENUATION_1                 CDATA #REQUIRED
      ATTENUATION_2                 CDATA #REQUIRED
      SPOTLIGHT_THETA               CDATA #REQUIRED
      SPOTLIGHT_PHI                 CDATA #REQUIRED
      RANGE                         CDATA #REQUIRED
      FALLOFF                       CDATA #REQUIRED
   >
   
   <!ATTLIST RmMaterialVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      AMBIENT_0                     CDATA #REQUIRED
      AMBIENT_1                     CDATA #REQUIRED
      AMBIENT_2                     CDATA #REQUIRED
      AMBIENT_3                     CDATA #REQUIRED
      DIFFUSE_0                     CDATA #REQUIRED
      DIFFUSE_1                     CDATA #REQUIRED
      DIFFUSE_2                     CDATA #REQUIRED
      DIFFUSE_3                     CDATA #REQUIRED
      SPECULAR_0                    CDATA #REQUIRED
      SPECULAR_1                    CDATA #REQUIRED
      SPECULAR_2                    CDATA #REQUIRED
      SPECULAR_3                    CDATA #REQUIRED
      EMISSIVE_0                    CDATA #REQUIRED
      EMISSIVE_1                    CDATA #REQUIRED
      EMISSIVE_2                    CDATA #REQUIRED
      EMISSIVE_3                    CDATA #REQUIRED
      SPECULAR_POWER                CDATA #REQUIRED
   >
      
   <!ATTLIST RmRegistryBranch
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      XML_VERSION                   CDATA #REQUIRED
   >
   
   <!ATTLIST RmPlugInData
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      PLUGIN_GUID                   CDATA #REQUIRED
   >

   <!ATTLIST RmClipboardNode
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      XML_VERSION                   CDATA #REQUIRED
   >
   
   <!ATTLIST RmCamera                
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      CAMERA_POSITION_X             CDATA #REQUIRED
      CAMERA_POSITION_Y             CDATA #REQUIRED
      CAMERA_POSITION_Z             CDATA #REQUIRED
      LOOK_AT_VECTOR_X              CDATA #REQUIRED
      LOOK_AT_VECTOR_Y              CDATA #REQUIRED
      LOOK_AT_VECTOR_Z              CDATA #REQUIRED
      UP_VECTOR_X                   CDATA #REQUIRED
      UP_VECTOR_Y                   CDATA #REQUIRED
      UP_VECTOR_Z                   CDATA #REQUIRED
      FOV                           CDATA #REQUIRED
      NEAR_CLIP_PLANE               CDATA #REQUIRED
      FAR_CLIP_PLANE                CDATA #REQUIRED
   >                                 

   <!ATTLIST RmCameraReference                
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      USE_ACTIVE_CAMERA             ( TRUE | FALSE ) #REQUIRED
   >                               
   
   <!ATTLIST RmShaderCode                
      TYPE                          ( TEXT ) #REQUIRED
   >                               
   
   <!ATTLIST RmTextDataBlock                
      TYPE                          ( TEXT ) #REQUIRED
   >                               
   
]>
<RENDER_MONKEY>
 <RmEffectWorkspace NAME="Effect Workspace" API="" ACTIVE_EFFECT="Effect Workspace.Hair Rendering.Ruby Hair" VALIDATION_STRING="" XML_VERSION="RenderMonkey 1.71">
  <RmRegistryBranch NAME="RM_REGISTRY" API="" XML_VERSION="RenderMonkey 1.71">
   <RmRegistryBranch NAME="RM_LOCAL" API="" XML_VERSION="RenderMonkey 1.71">
    <RmRegistryBranch NAME="WORKSPACE" API="" XML_VERSION="RenderMonkey 1.71">
     <RmStringVariable NAME="LAST_SAVE" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
11/7/2007 14:7:44]]></RmTextDataBlock></RmStringVariable>
     <RmStringVariable NAME="VERSION" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
RenderMonkey Version 1.71 (build 47)]]></RmTextDataBlock></RmStringVariable>
     <RmStringVariable NAME="XML_VERSION" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
RenderMonkey 1.71]]></RmTextDataBlock></RmStringVariable>
     <RmStringVariable NAME="BASE_WORKSPACE_PATH" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
C:\p4\3darg\Tools\RenderMonkey\Examples\DX9\]]></RmTextDataBlock></RmStringVariable>
    </RmRegistryBranch>
   </RmRegistryBranch>
  </RmRegistryBranch>
  <RmEffectGroup NAME="Hair Rendering" API="">
   <RmDirectXEffect NAME="Ruby Hair" API="D3D" ACTIVE_CAMERA="Camera">
    <RmStringVariable NAME="README" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
The effect demonstrates a hair rendering technique described in ShaderX3 article 
"Hair Rendering and Shading" by Thorsten Scheuermann. This technique is used 
in ATI “Ruby: The Double Cross” X800 launch demo (http://www.ati.com/developer/demos/rx800.html)

The main character’s hair is rendered using a polygon model, with realistic hair shading
computed in the pixel shader. The hair shader combines ideas from both Kajiya and Kay’s 
classic hair shading model [Kajiya89] and from a recent paper on hair shading by
 Marschner et al. [Marschner03]. 
The article also presents a simple technique for rendering the semi-transparent hair in an 
approximate back-to-front order, which is necessary for correct alpha blending.

(C) AMD, 2007]]></RmTextDataBlock></RmStringVariable>
    <RmCamera NAME="Camera" API="" CAMERA_POSITION_X="-40.119751" CAMERA_POSITION_Y="164.639481" CAMERA_POSITION_Z="18.723951" LOOK_AT_VECTOR_X="0.000000" LOOK_AT_VECTOR_Y="161.000000" LOOK_AT_VECTOR_Z="0.000000" UP_VECTOR_X="0.156383" UP_VECTOR_Y="0.976971" UP_VECTOR_Z="0.145164" FOV="45.000000" NEAR_CLIP_PLANE="1.000000" FAR_CLIP_PLANE="2000.000000"/>
    <RmDynamicVariable NAME="specularShift" API="" ARTIST_EDITABLE="TRUE" VARIABLE_SEMANTIC="" VARIABLE_TYPE="FLOAT" ROWS="2" COLUMNS="1" FIXED_SIZE="TRUE" MIN="-1.000000" MAX="1.000000" CLAMP="FALSE" NORMALIZE="FALSE">
     <RmDynamicVariableValueContainer>
      <RmDynamicVariableValue ROW_INDEX="0" COLUMN_INDEX="0" VALUE="0.080000"/>
      <RmDynamicVariableValue ROW_INDEX="1" COLUMN_INDEX="0" VALUE="0.540000"/>
     </RmDynamicVariableValueContainer>
    </RmDynamicVariable>
    <RmDynamicVariable NAME="specularExp" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VARIABLE_TYPE="FLOAT" ROWS="2" COLUMNS="1" FIXED_SIZE="TRUE" MIN="-1.000000" MAX="1.000000" CLAMP="FALSE" NORMALIZE="FALSE">
     <RmDynamicVariableValueContainer>
      <RmDynamicVariableValue ROW_INDEX="0" COLUMN_INDEX="0" VALUE="200.000000"/>
      <RmDynamicVariableValue ROW_INDEX="1" COLUMN_INDEX="0" VALUE="15.000000"/>
     </RmDynamicVariableValueContainer>
    </RmDynamicVariable>
    <RmDynamicVariable NAME="lightPos" API="" ARTIST_EDITABLE="TRUE" VARIABLE_SEMANTIC="" VARIABLE_TYPE="FLOAT" ROWS="3" COLUMNS="1" FIXED_SIZE="TRUE" MIN="-200.000000" MAX="200.000000" CLAMP="TRUE" NORMALIZE="FALSE">
     <RmDynamicVariableValueContainer>
      <RmDynamicVariableValue ROW_INDEX="0" COLUMN_INDEX="0" VALUE="-20.000000"/>
      <RmDynamicVariableValue ROW_INDEX="1" COLUMN_INDEX="0" VALUE="184.000000"/>
      <RmDynamicVariableValue ROW_INDEX="2" COLUMN_INDEX="0" VALUE="36.000000"/>
     </RmDynamicVariableValueContainer>
    </RmDynamicVariable>
    <RmMatrixVariable NAME="matViewProjection" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="ViewProjection" VALUE_0="-0.891499" VALUE_1="0.439217" VALUE_2="-1.995584" VALUE_3="-70.713921" VALUE_4="0.377542" VALUE_5="2.358616" VALUE_6="0.350457" VALUE_7="-379.736359" VALUE_8="0.903576" VALUE_9="-0.081968" VALUE_10="-0.421701" VALUE_11="56.641888" VALUE_12="0.903125" VALUE_13="-0.081927" VALUE_14="-0.421490" VALUE_15="57.613571"/>
    <RmMatrixVariable NAME="matView" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="View" VALUE_0="-0.399890" VALUE_1="0.197015" VALUE_2="-0.895139" VALUE_3="-31.719412" VALUE_4="0.156383" VALUE_5="0.976971" VALUE_6="0.145164" VALUE_7="-157.291946" VALUE_8="0.903125" VALUE_9="-0.081927" VALUE_10="-0.421490" VALUE_11="57.613571" VALUE_12="0.000000" VALUE_13="0.000000" VALUE_14="0.000000" VALUE_15="1.000000"/>
    <RmColorVariable NAME="specularColor0" API="" ARTIST_EDITABLE="TRUE" VARIABLE_SEMANTIC="" VALUE_0="0.727273" VALUE_1="0.636028" VALUE_2="0.466686" VALUE_3="1.000000"/>
    <RmColorVariable NAME="specularColor1" API="" ARTIST_EDITABLE="TRUE" VARIABLE_SEMANTIC="" VALUE_0="0.763636" VALUE_1="0.426697" VALUE_2="0.134870" VALUE_3="1.000000"/>
    <RmColorVariable NAME="diffuseLightColor" API="" ARTIST_EDITABLE="TRUE" VARIABLE_SEMANTIC="" VALUE_0="1.000000" VALUE_1="1.000000" VALUE_2="1.000000" VALUE_3="1.000000"/>
    <RmColorVariable NAME="specularLightColor" API="" ARTIST_EDITABLE="TRUE" VARIABLE_SEMANTIC="" VALUE_0="1.000000" VALUE_1="1.000000" VALUE_2="1.000000" VALUE_3="1.000000"/>
    <RmColorVariable NAME="ambientLightColor" API="" ARTIST_EDITABLE="TRUE" VARIABLE_SEMANTIC="" VALUE_0="0.792000" VALUE_1="0.792000" VALUE_2="0.792000" VALUE_3="1.000000"/>
    <RmColorVariable NAME="hairBaseColor" API="" ARTIST_EDITABLE="TRUE" VARIABLE_SEMANTIC="" VALUE_0="0.557576" VALUE_1="0.238558" VALUE_2="0.060705" VALUE_3="1.000000"/>
    <Rm2DTextureVariable NAME="Shift" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" FILE_NAME="..\Media\Textures\RubyHair\HairShift.bmp" ORIGIN="1"/>
    <Rm2DTextureVariable NAME="SpecularMask" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" FILE_NAME="..\Media\Textures\RubyHair\HairSpecMask.bmp" ORIGIN="1"/>
    <Rm2DTextureVariable NAME="Base" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" FILE_NAME="..\Media\Textures\RubyHair\HairBase.bmp" ORIGIN="1"/>
    <Rm2DTextureVariable NAME="Alpha" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" FILE_NAME="..\Media\Textures\RubyHair\HairAlpha.bmp" ORIGIN="1"/>
    <RmStreamMap NAME="Stream Mapping" API="">
     <RmStream NAME="" API="" STRIDE="56">
      <RmStreamChannel NAME="Position_0" API="" DATA_SIZE="12" DATA_TYPE="2" REGISTER="0" USAGE="0" USAGE_INDEX="0" ATTRIBUTE_NAME="rm_Vertex"/>
      <RmStreamChannel NAME="Normal_0" API="" DATA_SIZE="12" DATA_TYPE="2" REGISTER="0" USAGE="3" USAGE_INDEX="0" ATTRIBUTE_NAME="rm_Normal"/>
      <RmStreamChannel NAME="TexCoord_0" API="" DATA_SIZE="8" DATA_TYPE="1" REGISTER="0" USAGE="5" USAGE_INDEX="0" ATTRIBUTE_NAME="rm_TexCoord0"/>
      <RmStreamChannel NAME="Tangent_0" API="" DATA_SIZE="12" DATA_TYPE="2" REGISTER="0" USAGE="6" USAGE_INDEX="0" ATTRIBUTE_NAME="rm_Tangent"/>
      <RmStreamChannel NAME="Binormal_0" API="" DATA_SIZE="12" DATA_TYPE="2" REGISTER="0" USAGE="7" USAGE_INDEX="0" ATTRIBUTE_NAME="rm_Binormal"/>
     </RmStream>
    </RmStreamMap>
    <RmModelData NAME="HairModel" API="" FILE_NAME="..\Media\Models\Hair.obj" ORIENTATION="0"/>
    <RmPass NAME="HairPassOpaque" API="D3D" PASS_INDEX="1" ENABLED="TRUE">
     <RmCameraReference NAME="Camera" API="" USE_ACTIVE_CAMERA="FALSE"/>
     <RmModelReference NAME="HairModel" API=""/>
     <RmRenderStateBlock NAME="Render State" API="D3D">
      <RmState NAME="D3DRS_CULLMODE" API="D3D" STATE="22" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ALPHATESTENABLE" API="D3D" STATE="15" VALUE="0" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ZENABLE" API="D3D" STATE="7" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ZFUNC" API="D3D" STATE="23" VALUE="3" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ZWRITEENABLE" API="D3D" STATE="14" VALUE="0" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_COLORWRITEENABLE" API="D3D" STATE="168" VALUE="15" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmHLSLShader NAME="Pixel Shader" API="D3D" PIXEL_SHADER="TRUE" TARGET="ps_2_0" ENTRY_POINT="main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float4 ambientLightColor;
float4 specularLightColor;
float4 specularColor1;
float4 specularColor0;
float2 specularExp;
float4 diffuseLightColor;
float4 hairBaseColor;
float2 specularShift;

sampler2D tBase;
sampler2D tAlpha;
sampler2D tSpecularShift;
sampler2D tSpecularMask;

struct PS_INPUT
{
   float3 normal   : TEXCOORD0;
   float3 tangent  : TEXCOORD1;
   float3 viewVec  : TEXCOORD2;
   float2 texCoord : TEXCOORD3;
   float  ambOcc   : TEXCOORD4;
   float3 lightVec : TEXCOORD5;
};

float HairDiffuseTerm(float3 N, float3 L)
{
    return saturate(0.75 * dot(N, L) + 0.25);
}

float HairSingleSpecularTerm(float3 T, float3 H, float exponent)
{
    float dotTH = dot(T, H);
    float sinTH = sqrt(1.0 - dotTH*dotTH);
    return pow(sinTH, exponent);
}

float3 ShiftTangent(float3 T, float3 N, float shiftAmount)
{
    return normalize(T + shiftAmount * N);
}

float4 main(PS_INPUT i) : COLOR
{
    // shift tangents
    float shiftTex = tex2D(tSpecularShift, i.texCoord) - 0.5;

    float3 N = normalize (i.normal);
    
    float3 T1 = ShiftTangent(i.tangent, N, specularShift.x + shiftTex);
    float3 T2 = ShiftTangent(i.tangent, N, specularShift.y + shiftTex);

    // diffuse term
    float3 diffuse = hairBaseColor * diffuseLightColor *
                     HairDiffuseTerm(N, i.lightVec);

    // specular term
    float3 H = normalize(i.lightVec + i.viewVec);
    float3 specular = specularColor0 *
                      HairSingleSpecularTerm(T1, H, specularExp.x);

    float3 specular2 = specularColor1 *
                       HairSingleSpecularTerm(T2, H, specularExp.y);

    // modulate secondary specular term with noise
    float specularMask = tex2D(tSpecularMask, i.texCoord * 10.0f);
    specular2 *= specularMask;

    // specular attenuation for hair facing away from light
    float specularAttenuation = saturate(1.75 * dot(N, i.lightVec) + 0.25);

    specular = (specular + specular2) * specularLightColor *
               specularAttenuation;

    // read base texture
    float base = tex2D(tBase, i.texCoord);

    // combine terms for final output
    float4 o;

    o.rgb = (diffuse + ambientLightColor * hairBaseColor) * base;
    base = 1.5 * base - 0.5;
    o.rgb += specular * base;
    //o.rgb *= i.ambOcc;
    o.a = tex2D (tAlpha, i.texCoord);    // read alpha texture

    return o;

    return i.ambOcc;
}
]]></RmShaderCode>
      <RmSampler NAME="tAlpha" API="" REGISTER="1"/>
      <RmSampler NAME="tBase" API="" REGISTER="0"/>
      <RmSampler NAME="tSpecularMask" API="" REGISTER="3"/>
      <RmSampler NAME="tSpecularShift" API="" REGISTER="2"/>
      <RmShaderConstant NAME="specularColor1" API="" REGISTER="2"/>
      <RmShaderConstant NAME="specularExp" API="" REGISTER="4"/>
      <RmShaderConstant NAME="specularLightColor" API="" REGISTER="1"/>
      <RmShaderConstant NAME="specularShift" API="" REGISTER="7"/>
      <RmShaderConstant NAME="ambientLightColor" API="" REGISTER="0"/>
      <RmShaderConstant NAME="diffuseLightColor" API="" REGISTER="5"/>
      <RmShaderConstant NAME="hairBaseColor" API="" REGISTER="6"/>
      <RmShaderConstant NAME="specularColor0" API="" REGISTER="3"/>
     </RmHLSLShader>
     <RmHLSLShader NAME="Vertex Shader" API="D3D" PIXEL_SHADER="FALSE" TARGET="vs_1_1" ENTRY_POINT="main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float3 lightPos;
float4x4 matView;
float4x4 matViewProjection;
float4 lightDir;

struct VS_INPUT
{
   float4 pos      : POSITION;
   float3 normal   : NORMAL;
   float3 tangent  : BINORMAL0;
   float2 texCoord : TEXCOORD0;
};

struct VS_OUTPUT
{
   float4 pos      : POSITION;
   float3 normal   : TEXCOORD0;
   float3 tangent  : TEXCOORD1;
   float3 viewVec  : TEXCOORD2;
   float2 texCoord : TEXCOORD3;
   float  ambOcc   : TEXCOORD4;
   float3 lightVec : TEXCOORD5;
};

VS_OUTPUT main(VS_INPUT i)
{
   VS_OUTPUT o = (VS_OUTPUT) 0; 

   // Output transformed position:
   o.pos = mul(matViewProjection, i.pos); 
   
   // Output light vector:
   o.lightVec = normalize (lightPos - i.pos);

   // Compute position in view space:
   float3 Pview = mul( matView, i.pos ); 

   // hair model doesn't contain per-vertex ambient occlusion
   o.ambOcc = 1.0f;
   
   // Transform the input normal to view space:
   o.normal = i.normal;//normalize( mul( matView, tempNorm ) );   
 
   o.tangent = i.tangent;
   
   // Compute the view direction in view space:
   o.viewVec = - normalize( Pview );

   // Propagate texture coordinate for the object:
   o.texCoord = i.texCoord;
   
   return o;
}




]]></RmShaderCode>
      <RmShaderConstant NAME="lightPos" API="" REGISTER="7"/>
      <RmShaderConstant NAME="matView" API="" REGISTER="4"/>
      <RmShaderConstant NAME="matViewProjection" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="tAlpha" API="D3D" STATE_INDEX="1" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="Alpha" API=""/>
      <RmState NAME="D3DSAMP_ADDRESSU" API="D3D" STATE="1" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_ADDRESSV" API="D3D" STATE="2" VALUE="3" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MINFILTER" API="D3D" STATE="6" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MIPFILTER" API="D3D" STATE="7" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MAGFILTER" API="D3D" STATE="5" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmTextureObject NAME="tSpecularShift" API="D3D" STATE_INDEX="2" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="Shift" API=""/>
      <RmState NAME="D3DSAMP_ADDRESSU" API="D3D" STATE="1" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_ADDRESSV" API="D3D" STATE="2" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MAGFILTER" API="D3D" STATE="5" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MIPFILTER" API="D3D" STATE="7" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MINFILTER" API="D3D" STATE="6" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmTextureObject NAME="tSpecularMask" API="D3D" STATE_INDEX="3" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="SpecularMask" API=""/>
      <RmState NAME="D3DSAMP_ADDRESSU" API="D3D" STATE="1" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_ADDRESSV" API="D3D" STATE="2" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MINFILTER" API="D3D" STATE="6" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MIPFILTER" API="D3D" STATE="7" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MAGFILTER" API="D3D" STATE="5" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmTextureObject NAME="tBase" API="D3D" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="Base" API=""/>
      <RmState NAME="D3DSAMP_ADDRESSU" API="D3D" STATE="1" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_ADDRESSV" API="D3D" STATE="2" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MAGFILTER" API="D3D" STATE="5" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MINFILTER" API="D3D" STATE="6" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MIPFILTER" API="D3D" STATE="7" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
    </RmPass>
    <RmPass NAME="HairPassBackFacingTransparent" API="D3D" PASS_INDEX="2" ENABLED="TRUE">
     <RmCameraReference NAME="Camera" API="" USE_ACTIVE_CAMERA="FALSE"/>
     <RmModelReference NAME="HairModel" API=""/>
     <RmRenderStateBlock NAME="Render State" API="D3D">
      <RmState NAME="D3DRS_CULLMODE" API="D3D" STATE="22" VALUE="2" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ZENABLE" API="D3D" STATE="7" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ZWRITEENABLE" API="D3D" STATE="14" VALUE="0" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ZFUNC" API="D3D" STATE="23" VALUE="2" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ALPHABLENDENABLE" API="D3D" STATE="27" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_DESTBLEND" API="D3D" STATE="20" VALUE="5" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_SRCBLEND" API="D3D" STATE="19" VALUE="6" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmHLSLShader NAME="Pixel Shader" API="D3D" PIXEL_SHADER="TRUE" TARGET="ps_2_0" ENTRY_POINT="main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float4 ambientLightColor;
float4 specularLightColor;
float4 specularColor1;
float4 specularColor0;
float2 specularExp;
float4 diffuseLightColor;
float4 hairBaseColor;
float2 specularShift;

sampler2D tBase;
sampler2D tAlpha;
sampler2D tSpecularShift;
sampler2D tSpecularMask;

struct PS_INPUT
{
   float3 normal   : TEXCOORD0;
   float3 tangent  : TEXCOORD1;
   float3 viewVec  : TEXCOORD2;
   float2 texCoord : TEXCOORD3;
   float  ambOcc   : TEXCOORD4;
   float3 lightVec : TEXCOORD5;
};

float HairDiffuseTerm(float3 N, float3 L)
{
    return saturate(0.75 * dot(N, L) + 0.25);
}

float HairSingleSpecularTerm(float3 T, float3 H, float exponent)
{
    float dotTH = dot(T, H);
    float sinTH = sqrt(1.0 - dotTH*dotTH);
    return pow(sinTH, exponent);
}

float3 ShiftTangent(float3 T, float3 N, float shiftAmount)
{
    return normalize(T + shiftAmount * N);
}

float4 main(PS_INPUT i) : COLOR
{
    // shift tangents
    float shiftTex = tex2D(tSpecularShift, i.texCoord) - 0.5;

    float3 N = normalize (i.normal);
    
    float3 T1 = ShiftTangent(i.tangent, N, specularShift.x + shiftTex);
    float3 T2 = ShiftTangent(i.tangent, N, specularShift.y + shiftTex);

    // diffuse term
    float3 diffuse = hairBaseColor * diffuseLightColor *
                     HairDiffuseTerm(N, i.lightVec);

    // specular term
    float3 H = normalize(i.lightVec + i.viewVec);
    float3 specular = specularColor0 *
                      HairSingleSpecularTerm(T1, H, specularExp.x);

    float3 specular2 = specularColor1 *
                       HairSingleSpecularTerm(T2, H, specularExp.y);

    // modulate secondary specular term with noise
    float specularMask = tex2D(tSpecularMask, i.texCoord * 10.0f);
    specular2 *= specularMask;

    // specular attenuation for hair facing away from light
    float specularAttenuation = saturate(1.75 * dot(N, i.lightVec) + 0.25);

    specular = (specular + specular2) * specularLightColor *
               specularAttenuation;

    // read base texture
    float base = tex2D(tBase, i.texCoord);

    // combine terms for final output
    float4 o;

    o.rgb = (diffuse + ambientLightColor * hairBaseColor) * base;
    base = 1.5 * base - 0.5;
    o.rgb += specular * base;
    //o.rgb *= i.ambOcc;
    o.a = tex2D (tAlpha, i.texCoord);    // read alpha texture

    return o;

    return i.ambOcc;
}
]]></RmShaderCode>
      <RmSampler NAME="tAlpha" API="" REGISTER="1"/>
      <RmSampler NAME="tBase" API="" REGISTER="0"/>
      <RmSampler NAME="tSpecularMask" API="" REGISTER="3"/>
      <RmSampler NAME="tSpecularShift" API="" REGISTER="2"/>
      <RmShaderConstant NAME="specularColor1" API="" REGISTER="2"/>
      <RmShaderConstant NAME="specularExp" API="" REGISTER="4"/>
      <RmShaderConstant NAME="specularLightColor" API="" REGISTER="1"/>
      <RmShaderConstant NAME="specularShift" API="" REGISTER="7"/>
      <RmShaderConstant NAME="ambientLightColor" API="" REGISTER="0"/>
      <RmShaderConstant NAME="diffuseLightColor" API="" REGISTER="5"/>
      <RmShaderConstant NAME="hairBaseColor" API="" REGISTER="6"/>
      <RmShaderConstant NAME="specularColor0" API="" REGISTER="3"/>
     </RmHLSLShader>
     <RmHLSLShader NAME="Vertex Shader" API="D3D" PIXEL_SHADER="FALSE" TARGET="vs_1_1" ENTRY_POINT="main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float3 lightPos;
float4x4 matView;
float4x4 matViewProjection;
float4 lightDir;

struct VS_INPUT
{
   float4 pos      : POSITION;
   float3 normal   : NORMAL;
   float3 tangent  : BINORMAL0;
   float2 texCoord : TEXCOORD0;
};

struct VS_OUTPUT
{
   float4 pos      : POSITION;
   float3 normal   : TEXCOORD0;
   float3 tangent  : TEXCOORD1;
   float3 viewVec  : TEXCOORD2;
   float2 texCoord : TEXCOORD3;
   float  ambOcc   : TEXCOORD4;
   float3 lightVec : TEXCOORD5;
};

VS_OUTPUT main(VS_INPUT i)
{
   VS_OUTPUT o = (VS_OUTPUT) 0; 

   // Output transformed position:
   o.pos = mul(matViewProjection, i.pos); 
   
   // Output light vector:
   o.lightVec = normalize (lightPos - i.pos);

   // Compute position in view space:
   float3 Pview = mul( matView, i.pos ); 

   // hair model doesn't contain per-vertex ambient occlusion
   o.ambOcc = 1.0f;
   
   // Transform the input normal to view space:
   o.normal = i.normal;//normalize( mul( matView, tempNorm ) );   
 
   o.tangent = i.tangent;
   
   // Compute the view direction in view space:
   o.viewVec = - normalize( Pview );

   // Propagate texture coordinate for the object:
   o.texCoord = i.texCoord;
   
   return o;
}




]]></RmShaderCode>
      <RmShaderConstant NAME="lightPos" API="" REGISTER="7"/>
      <RmShaderConstant NAME="matView" API="" REGISTER="4"/>
      <RmShaderConstant NAME="matViewProjection" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="tAlpha" API="D3D" STATE_INDEX="1" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="Alpha" API=""/>
      <RmState NAME="D3DSAMP_ADDRESSU" API="D3D" STATE="1" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_ADDRESSV" API="D3D" STATE="2" VALUE="3" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MINFILTER" API="D3D" STATE="6" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MIPFILTER" API="D3D" STATE="7" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MAGFILTER" API="D3D" STATE="5" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmTextureObject NAME="tSpecularShift" API="D3D" STATE_INDEX="2" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="Shift" API=""/>
      <RmState NAME="D3DSAMP_ADDRESSU" API="D3D" STATE="1" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_ADDRESSV" API="D3D" STATE="2" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MAGFILTER" API="D3D" STATE="5" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MIPFILTER" API="D3D" STATE="7" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MINFILTER" API="D3D" STATE="6" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmTextureObject NAME="tSpecularMask" API="D3D" STATE_INDEX="3" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="SpecularMask" API=""/>
      <RmState NAME="D3DSAMP_ADDRESSU" API="D3D" STATE="1" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_ADDRESSV" API="D3D" STATE="2" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MINFILTER" API="D3D" STATE="6" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MIPFILTER" API="D3D" STATE="7" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MAGFILTER" API="D3D" STATE="5" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmTextureObject NAME="tBase" API="D3D" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="Base" API=""/>
      <RmState NAME="D3DSAMP_ADDRESSU" API="D3D" STATE="1" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_ADDRESSV" API="D3D" STATE="2" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MAGFILTER" API="D3D" STATE="5" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MINFILTER" API="D3D" STATE="6" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MIPFILTER" API="D3D" STATE="7" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
    </RmPass>
    <RmPass NAME="HairPassFrontFacingTransparent" API="D3D" PASS_INDEX="3" ENABLED="TRUE">
     <RmCameraReference NAME="Camera" API="" USE_ACTIVE_CAMERA="FALSE"/>
     <RmModelReference NAME="HairModel" API=""/>
     <RmRenderStateBlock NAME="Render State" API="D3D">
      <RmState NAME="D3DRS_CULLMODE" API="D3D" STATE="22" VALUE="3" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ALPHATESTENABLE" API="D3D" STATE="15" VALUE="0" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ZWRITEENABLE" API="D3D" STATE="14" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmHLSLShader NAME="Pixel Shader" API="D3D" PIXEL_SHADER="TRUE" TARGET="ps_2_0" ENTRY_POINT="main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float4 ambientLightColor;
float4 specularLightColor;
float4 specularColor1;
float4 specularColor0;
float2 specularExp;
float4 diffuseLightColor;
float4 hairBaseColor;
float2 specularShift;

sampler2D tBase;
sampler2D tAlpha;
sampler2D tSpecularShift;
sampler2D tSpecularMask;

struct PS_INPUT
{
   float3 normal   : TEXCOORD0;
   float3 tangent  : TEXCOORD1;
   float3 viewVec  : TEXCOORD2;
   float2 texCoord : TEXCOORD3;
   float  ambOcc   : TEXCOORD4;
   float3 lightVec : TEXCOORD5;
};

float HairDiffuseTerm(float3 N, float3 L)
{
    return saturate(0.75 * dot(N, L) + 0.25);
}

float HairSingleSpecularTerm(float3 T, float3 H, float exponent)
{
    float dotTH = dot(T, H);
    float sinTH = sqrt(1.0 - dotTH*dotTH);
    return pow(sinTH, exponent);
}

float3 ShiftTangent(float3 T, float3 N, float shiftAmount)
{
    return normalize(T + shiftAmount * N);
}

float4 main(PS_INPUT i) : COLOR
{
    // shift tangents
    float shiftTex = tex2D(tSpecularShift, i.texCoord) - 0.5;

    float3 N = normalize (i.normal);
    
    float3 T1 = ShiftTangent(i.tangent, N, specularShift.x + shiftTex);
    float3 T2 = ShiftTangent(i.tangent, N, specularShift.y + shiftTex);

    // diffuse term
    float3 diffuse = hairBaseColor * diffuseLightColor *
                     HairDiffuseTerm(N, i.lightVec);

    // specular term
    float3 H = normalize(i.lightVec + i.viewVec);
    float3 specular = specularColor0 *
                      HairSingleSpecularTerm(T1, H, specularExp.x);

    float3 specular2 = specularColor1 *
                       HairSingleSpecularTerm(T2, H, specularExp.y);

    // modulate secondary specular term with noise
    float specularMask = tex2D(tSpecularMask, i.texCoord * 10.0f);
    specular2 *= specularMask;

    // specular attenuation for hair facing away from light
    float specularAttenuation = saturate(1.75 * dot(N, i.lightVec) + 0.25);

    specular = (specular + specular2) * specularLightColor *
               specularAttenuation;

    // read base texture
    float base = tex2D(tBase, i.texCoord);

    // combine terms for final output
    float4 o;

    o.rgb = (diffuse + ambientLightColor * hairBaseColor) * base;
    base = 1.5 * base - 0.5;
    o.rgb += specular * base;
    //o.rgb *= i.ambOcc;
    o.a = tex2D (tAlpha, i.texCoord);    // read alpha texture

    return o;

    return i.ambOcc;
}
]]></RmShaderCode>
      <RmSampler NAME="tAlpha" API="" REGISTER="1"/>
      <RmSampler NAME="tBase" API="" REGISTER="0"/>
      <RmSampler NAME="tSpecularMask" API="" REGISTER="3"/>
      <RmSampler NAME="tSpecularShift" API="" REGISTER="2"/>
      <RmShaderConstant NAME="specularColor1" API="" REGISTER="2"/>
      <RmShaderConstant NAME="specularExp" API="" REGISTER="4"/>
      <RmShaderConstant NAME="specularLightColor" API="" REGISTER="1"/>
      <RmShaderConstant NAME="specularShift" API="" REGISTER="7"/>
      <RmShaderConstant NAME="ambientLightColor" API="" REGISTER="0"/>
      <RmShaderConstant NAME="diffuseLightColor" API="" REGISTER="5"/>
      <RmShaderConstant NAME="hairBaseColor" API="" REGISTER="6"/>
      <RmShaderConstant NAME="specularColor0" API="" REGISTER="3"/>
     </RmHLSLShader>
     <RmHLSLShader NAME="Vertex Shader" API="D3D" PIXEL_SHADER="FALSE" TARGET="vs_1_1" ENTRY_POINT="main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float3 lightPos;
float4x4 matView;
float4x4 matViewProjection;
float4 lightDir;

struct VS_INPUT
{
   float4 pos      : POSITION;
   float3 normal   : NORMAL;
   float3 tangent  : BINORMAL0;
   float2 texCoord : TEXCOORD0;
};

struct VS_OUTPUT
{
   float4 pos      : POSITION;
   float3 normal   : TEXCOORD0;
   float3 tangent  : TEXCOORD1;
   float3 viewVec  : TEXCOORD2;
   float2 texCoord : TEXCOORD3;
   float  ambOcc   : TEXCOORD4;
   float3 lightVec : TEXCOORD5;
};

VS_OUTPUT main(VS_INPUT i)
{
   VS_OUTPUT o = (VS_OUTPUT) 0; 

   // Output transformed position:
   o.pos = mul(matViewProjection, i.pos); 
   
   // Output light vector:
   o.lightVec = normalize (lightPos - i.pos);

   // Compute position in view space:
   float3 Pview = mul( matView, i.pos ); 

   // hair model doesn't contain per-vertex ambient occlusion
   o.ambOcc = 1.0f;
   
   // Transform the input normal to view space:
   o.normal = i.normal;//normalize( mul( matView, tempNorm ) );   
 
   o.tangent = i.tangent;
   
   // Compute the view direction in view space:
   o.viewVec = - normalize( Pview );

   // Propagate texture coordinate for the object:
   o.texCoord = i.texCoord;
   
   return o;
}




]]></RmShaderCode>
      <RmShaderConstant NAME="lightPos" API="" REGISTER="7"/>
      <RmShaderConstant NAME="matView" API="" REGISTER="4"/>
      <RmShaderConstant NAME="matViewProjection" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="tAlpha" API="D3D" STATE_INDEX="1" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="Alpha" API=""/>
      <RmState NAME="D3DSAMP_ADDRESSU" API="D3D" STATE="1" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_ADDRESSV" API="D3D" STATE="2" VALUE="3" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MINFILTER" API="D3D" STATE="6" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MIPFILTER" API="D3D" STATE="7" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MAGFILTER" API="D3D" STATE="5" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmTextureObject NAME="tSpecularShift" API="D3D" STATE_INDEX="2" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="Shift" API=""/>
      <RmState NAME="D3DSAMP_ADDRESSU" API="D3D" STATE="1" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_ADDRESSV" API="D3D" STATE="2" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MAGFILTER" API="D3D" STATE="5" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MIPFILTER" API="D3D" STATE="7" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MINFILTER" API="D3D" STATE="6" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmTextureObject NAME="tSpecularMask" API="D3D" STATE_INDEX="3" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="SpecularMask" API=""/>
      <RmState NAME="D3DSAMP_ADDRESSU" API="D3D" STATE="1" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_ADDRESSV" API="D3D" STATE="2" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MINFILTER" API="D3D" STATE="6" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MIPFILTER" API="D3D" STATE="7" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MAGFILTER" API="D3D" STATE="5" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmTextureObject NAME="tBase" API="D3D" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="Base" API=""/>
      <RmState NAME="D3DSAMP_ADDRESSU" API="D3D" STATE="1" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_ADDRESSV" API="D3D" STATE="2" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MAGFILTER" API="D3D" STATE="5" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MINFILTER" API="D3D" STATE="6" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MIPFILTER" API="D3D" STATE="7" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
    </RmPass>
    <RmPass NAME="HairPrimeZ" API="D3D" PASS_INDEX="0" ENABLED="TRUE">
     <RmCameraReference NAME="Camera" API="" USE_ACTIVE_CAMERA="FALSE"/>
     <RmModelReference NAME="HairModel" API=""/>
     <RmRenderStateBlock NAME="Render State" API="D3D">
      <RmState NAME="D3DRS_CULLMODE" API="D3D" STATE="22" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ALPHAFUNC" API="D3D" STATE="25" VALUE="4" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ALPHAREF" API="D3D" STATE="24" VALUE="2" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ALPHATESTENABLE" API="D3D" STATE="15" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ZENABLE" API="D3D" STATE="7" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ZFUNC" API="D3D" STATE="23" VALUE="4" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ZWRITEENABLE" API="D3D" STATE="14" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_COLORWRITEENABLE" API="D3D" STATE="168" VALUE="0" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmHLSLShader NAME="Pixel Shader" API="D3D" PIXEL_SHADER="TRUE" TARGET="ps_2_0" ENTRY_POINT="main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
sampler2D tAlpha;

struct PS_INPUT
{
   float2 texCoord : TEXCOORD3;
};

float4 main(PS_INPUT i) : COLOR
{
    float4 o;
    
    o.rgb = 1.0;
    o.a = tex2D (tAlpha, i.texCoord);    // read alpha texture

    return o;
}
]]></RmShaderCode>
      <RmSampler NAME="tAlpha" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmHLSLShader NAME="Vertex Shader" API="D3D" PIXEL_SHADER="FALSE" TARGET="vs_1_1" ENTRY_POINT="main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float3 lightPos;
float4x4 matView;
float4x4 matViewProjection;
float4 lightDir;

struct VS_INPUT
{
   float4 pos      : POSITION;
   float3 normal   : NORMAL;
   float3 tangent  : BINORMAL0;
   float2 texCoord : TEXCOORD0;
};

struct VS_OUTPUT
{
   float4 pos      : POSITION;
   float3 normal   : TEXCOORD0;
   float3 tangent  : TEXCOORD1;
   float3 viewVec  : TEXCOORD2;
   float2 texCoord : TEXCOORD3;
   float  ambOcc   : TEXCOORD4;
   float3 lightVec : TEXCOORD5;
};

VS_OUTPUT main(VS_INPUT i)
{
   VS_OUTPUT o = (VS_OUTPUT) 0; 

   // Output transformed position:
   o.pos = mul(matViewProjection, i.pos); 
   
   // Output light vector:
   o.lightVec = normalize (lightPos - i.pos);

   // Compute position in view space:
   float3 Pview = mul( matView, i.pos ); 

   // hair model doesn't contain per-vertex ambient occlusion
   o.ambOcc = 1.0f;
   
   // Transform the input normal to view space:
   o.normal = i.normal;//normalize( mul( matView, tempNorm ) );   
 
   o.tangent = i.tangent;
   
   // Compute the view direction in view space:
   o.viewVec = - normalize( Pview );

   // Propagate texture coordinate for the object:
   o.texCoord = i.texCoord;
   
   return o;
}




]]></RmShaderCode>
      <RmShaderConstant NAME="lightPos" API="" REGISTER="7"/>
      <RmShaderConstant NAME="matView" API="" REGISTER="4"/>
      <RmShaderConstant NAME="matViewProjection" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="tAlpha" API="D3D" STATE_INDEX="1" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="Alpha" API=""/>
      <RmState NAME="D3DSAMP_ADDRESSU" API="D3D" STATE="1" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_ADDRESSV" API="D3D" STATE="2" VALUE="3" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MINFILTER" API="D3D" STATE="6" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MIPFILTER" API="D3D" STATE="7" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MAGFILTER" API="D3D" STATE="5" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmTextureObject NAME="tSpecularShift" API="D3D" STATE_INDEX="2" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="Shift" API=""/>
      <RmState NAME="D3DSAMP_ADDRESSU" API="D3D" STATE="1" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_ADDRESSV" API="D3D" STATE="2" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MAGFILTER" API="D3D" STATE="5" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MIPFILTER" API="D3D" STATE="7" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MINFILTER" API="D3D" STATE="6" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmTextureObject NAME="tSpecularMask" API="D3D" STATE_INDEX="3" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="SpecularMask" API=""/>
      <RmState NAME="D3DSAMP_ADDRESSU" API="D3D" STATE="1" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_ADDRESSV" API="D3D" STATE="2" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MINFILTER" API="D3D" STATE="6" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MIPFILTER" API="D3D" STATE="7" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MAGFILTER" API="D3D" STATE="5" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
     <RmTextureObject NAME="tBase" API="D3D" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="Base" API=""/>
      <RmState NAME="D3DSAMP_ADDRESSU" API="D3D" STATE="1" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_ADDRESSV" API="D3D" STATE="2" VALUE="1" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MAGFILTER" API="D3D" STATE="5" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MINFILTER" API="D3D" STATE="6" VALUE="2" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MIPFILTER" API="D3D" STATE="7" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
    </RmPass>
   </RmDirectXEffect>
   <RmDirectXEffect NAME="KajiyaKayNormalPS" API="D3D" ACTIVE_CAMERA="Camera">
    <RmStringVariable NAME="Description" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
A workspace illustrating the classic phenomenological Kajiya Kay model for 
simulating hair rendering. ]]></RmTextDataBlock></RmStringVariable>
    <RmCamera NAME="Camera" API="" CAMERA_POSITION_X="24.527451" CAMERA_POSITION_Y="1.659219" CAMERA_POSITION_Z="-4.478375" LOOK_AT_VECTOR_X="-0.432959" LOOK_AT_VECTOR_Y="-0.411938" LOOK_AT_VECTOR_Z="-1.228203" UP_VECTOR_X="0.128560" UP_VECTOR_Y="0.006874" UP_VECTOR_Z="0.991678" FOV="45.000000" NEAR_CLIP_PLANE="10.461448" FAR_CLIP_PLANE="33.922714"/>
    <RmMatrixVariable NAME="inv_view_matrix" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="ViewInverse" VALUE_0="0.082208" VALUE_1="0.128559" VALUE_2="-0.988289" VALUE_3="24.527451" VALUE_4="-0.996608" VALUE_5="0.006874" VALUE_6="-0.082006" VALUE_7="1.659219" VALUE_8="-0.003749" VALUE_9="0.991678" VALUE_10="0.128689" VALUE_11="-4.478375" VALUE_12="0.000000" VALUE_13="0.000000" VALUE_14="0.000000" VALUE_15="1.000000"/>
    <RmVectorVariable NAME="lightDir" API="" ARTIST_EDITABLE="TRUE" VARIABLE_SEMANTIC="" VALUE_0="-0.668711" VALUE_1="-0.717281" VALUE_2="-0.195790" VALUE_3="1.000000" MIN="-10.000000" MAX="10.000000" CLAMP="FALSE" NORMALIZE="FALSE"/>
    <RmVectorVariable NAME="view_position" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="ViewPosition" VALUE_0="24.527451" VALUE_1="1.659219" VALUE_2="-4.478375" VALUE_3="1.000000" MIN="-10.000000" MAX="10.000000" CLAMP="FALSE" NORMALIZE="FALSE"/>
    <RmFloatVariable NAME="specularity" API="" ARTIST_EDITABLE="TRUE" VARIABLE_SEMANTIC="" VALUE="385.000000" MIN="0.000000" MAX="500.000000" CLAMP="TRUE"/>
    <RmMatrixVariable NAME="view_proj_matrix" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="ViewProjection" VALUE_0="0.181144" VALUE_1="-2.196005" VALUE_2="-0.008262" VALUE_3="-0.836336" VALUE_4="0.310371" VALUE_5="0.016595" VALUE_6="2.394123" VALUE_7="3.081642" VALUE_8="-1.428970" VALUE_9="-0.118573" VALUE_10="0.186071" VALUE_11="20.952772" VALUE_12="-0.988289" VALUE_13="-0.082006" VALUE_14="0.128688" VALUE_15="24.952579"/>
    <RmColorVariable NAME="Kd" API="" ARTIST_EDITABLE="TRUE" VARIABLE_SEMANTIC="" VALUE_0="0.864516" VALUE_1="0.517165" VALUE_2="0.308449" VALUE_3="1.000000"/>
    <RmColorVariable NAME="Ks" API="" ARTIST_EDITABLE="TRUE" VARIABLE_SEMANTIC="" VALUE_0="1.000000" VALUE_1="1.000000" VALUE_2="1.000000" VALUE_3="1.000000"/>
    <Rm2DTextureVariable NAME="HairStrand" API="" ARTIST_EDITABLE="TRUE" VARIABLE_SEMANTIC="" FILE_NAME="..\Media\Textures\Hair\HairStrand.bmp" ORIGIN="0"/>
    <Rm2DTextureVariable NAME="HairStrandAlpha" API="" ARTIST_EDITABLE="TRUE" VARIABLE_SEMANTIC="" FILE_NAME="..\Media\Textures\Hair\HairStrandAlpha.bmp" ORIGIN="0"/>
    <RmStreamMap NAME="Stream Mapping" API="">
     <RmStream NAME="Normal3" API="" STRIDE="56">
      <RmStreamChannel NAME="Position_0" API="" DATA_SIZE="12" DATA_TYPE="2" REGISTER="0" USAGE="0" USAGE_INDEX="0" ATTRIBUTE_NAME="rm_Vertex"/>
      <RmStreamChannel NAME="Normal_0" API="" DATA_SIZE="12" DATA_TYPE="2" REGISTER="1" USAGE="3" USAGE_INDEX="0" ATTRIBUTE_NAME="rm_Normal"/>
      <RmStreamChannel NAME="TexCoord_0" API="" DATA_SIZE="8" DATA_TYPE="1" REGISTER="1" USAGE="5" USAGE_INDEX="0" ATTRIBUTE_NAME="rm_TexCoord0"/>
      <RmStreamChannel NAME="Tangent_0" API="" DATA_SIZE="12" DATA_TYPE="2" REGISTER="1" USAGE="6" USAGE_INDEX="0" ATTRIBUTE_NAME="rm_Tangent"/>
      <RmStreamChannel NAME="Binormal_0" API="" DATA_SIZE="12" DATA_TYPE="2" REGISTER="1" USAGE="7" USAGE_INDEX="0" ATTRIBUTE_NAME="rm_Binormal"/>
     </RmStream>
    </RmStreamMap>
    <RmModelData NAME="HairPatch" API="" FILE_NAME="..\Media\Models\HairPatch.3ds" ORIENTATION="0"/>
    <RmPass NAME="Front side" API="D3D" PASS_INDEX="1" ENABLED="TRUE">
     <RmCameraReference NAME="Camera" API="" USE_ACTIVE_CAMERA="FALSE"/>
     <RmModelReference NAME="HairPatch" API=""/>
     <RmRenderStateBlock NAME="Render State" API="D3D">
      <RmState NAME="D3DRS_CULLMODE" API="D3D" STATE="22" VALUE="3" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ALPHABLENDENABLE" API="D3D" STATE="27" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_BLENDFACTOR" API="D3D" STATE="193" VALUE="33554432" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_SRCBLEND" API="D3D" STATE="19" VALUE="5" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_DESTBLEND" API="D3D" STATE="20" VALUE="6" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ZENABLE" API="D3D" STATE="7" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ZWRITEENABLE" API="D3D" STATE="14" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmHLSLShader NAME="Pixel Shader" API="D3D" PIXEL_SHADER="TRUE" TARGET="ps_2_0" ENTRY_POINT="ps_main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float4 lightDir;
float4 Kd;
float specularity;
float4 Ks;
sampler ColorTexture;
sampler AlphaTexture;

struct VS_OUTPUT 
{
   float4 Pos:     POSITION;
   float2 uv:      TEXCOORD0;
   float3 Tangent: TEXCOORD1;
   float3 viewDir: TEXCOORD2;
};

float4 ps_main( VS_OUTPUT In ) : COLOR0
{
   float dotTL = dot (In.Tangent, lightDir);
   float dotTV = dot (In.Tangent, normalize (In.viewDir));

   float sinTL = sqrt (1 - dotTL*dotTL);
   float sinTV = sqrt (1 - dotTV*dotTV);

	float3 diffuse = Kd * sinTL;
   float3 specular = Ks * pow (dotTL*dotTV + sinTL*sinTV, specularity);
   
   float4 color = float4(diffuse + specular, 0);

   // modulate everything with grayscale base texture and apply alpha
   // texture
   color.rgb *= tex2D (ColorTexture, In.uv.yx);
   color.a = tex2D (AlphaTexture, In.uv.yx).r;

   return color;
}



]]></RmShaderCode>
      <RmSampler NAME="AlphaTexture" API="" REGISTER="1"/>
      <RmSampler NAME="ColorTexture" API="" REGISTER="0"/>
      <RmShaderConstant NAME="Kd" API="" REGISTER="1"/>
      <RmShaderConstant NAME="Ks" API="" REGISTER="3"/>
      <RmShaderConstant NAME="lightDir" API="" REGISTER="0"/>
      <RmShaderConstant NAME="specularity" API="" REGISTER="2"/>
     </RmHLSLShader>
     <RmHLSLShader NAME="Vertex Shader" API="D3D" PIXEL_SHADER="FALSE" TARGET="vs_2_0" ENTRY_POINT="vs_main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float4x4 view_proj_matrix;
float displacement;
float4 view_position;
float4x4 view_matrix;
float4x4 inv_view_matrix;

struct VS_INPUT 
{
   float4 Pos:     POSITION;
   float3 Normal:  NORMAL;
   float3 Color:   COLOR0;
   float2 uv:      TEXCOORD0;
   float3 Tangent: TANGENT0;
   float3 Binormal:BINORMAL0;
};

struct VS_OUTPUT 
{
   float4 Pos:     POSITION;
   float2 uv:      TEXCOORD0;
   float3 Tangent: TEXCOORD1;
   float3 viewDir: TEXCOORD2;
};

VS_OUTPUT vs_main( VS_INPUT In )
{
   VS_OUTPUT Out;
	
   Out.Pos = mul(view_proj_matrix, In.Pos);

   Out.Tangent = In.Tangent;
   
   // compute normalized vector from vertex to camera
   Out.viewDir = normalize (mul(inv_view_matrix, view_position) -  In.Pos);
   
   Out.uv = In.uv;
   
   return Out;
}



]]></RmShaderCode>
      <RmShaderConstant NAME="inv_view_matrix" API="" REGISTER="4"/>
      <RmShaderConstant NAME="view_position" API="" REGISTER="8"/>
      <RmShaderConstant NAME="view_proj_matrix" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="AlphaTexture" API="D3D" STATE_INDEX="1" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HairStrandAlpha" API=""/>
     </RmTextureObject>
     <RmTextureObject NAME="ColorTexture" API="D3D" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HairStrand" API=""/>
      <RmState NAME="D3DSAMP_MINFILTER" API="D3D" STATE="6" VALUE="3" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MAXANISOTROPY" API="D3D" STATE="10" VALUE="4" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MIPFILTER" API="D3D" STATE="7" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
    </RmPass>
    <RmPass NAME="Back side" API="D3D" PASS_INDEX="0" ENABLED="TRUE">
     <RmCameraReference NAME="Camera" API="" USE_ACTIVE_CAMERA="FALSE"/>
     <RmModelReference NAME="HairPatch" API=""/>
     <RmRenderStateBlock NAME="Render State" API="D3D">
      <RmState NAME="D3DRS_CULLMODE" API="D3D" STATE="22" VALUE="2" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ALPHABLENDENABLE" API="D3D" STATE="27" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_BLENDFACTOR" API="D3D" STATE="193" VALUE="33554432" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_SRCBLEND" API="D3D" STATE="19" VALUE="5" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_DESTBLEND" API="D3D" STATE="20" VALUE="6" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ZWRITEENABLE" API="D3D" STATE="14" VALUE="0" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmHLSLShader NAME="Pixel Shader" API="D3D" PIXEL_SHADER="TRUE" TARGET="ps_2_0" ENTRY_POINT="ps_main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float4 lightDir;
float4 Kd;
float specularity;
float4 Ks;
sampler ColorTexture;
sampler AlphaTexture;

struct VS_OUTPUT 
{
   float4 Pos:     POSITION;
   float2 uv:      TEXCOORD0;
   float3 Tangent: TEXCOORD1;
   float3 viewDir: TEXCOORD2;
};

float4 ps_main( VS_OUTPUT In ) : COLOR0
{
   float dotTL = dot (In.Tangent, lightDir);
   float dotTV = dot (In.Tangent, normalize (In.viewDir));

   float sinTL = sqrt (1 - dotTL*dotTL);
   float sinTV = sqrt (1 - dotTV*dotTV);

	float3 diffuse = Kd * sinTL;
   float3 specular = Ks * pow (dotTL*dotTV + sinTL*sinTV, specularity);
   
   float4 color = float4(diffuse + specular, 0);

   // modulate everything with grayscale base texture and apply alpha
   // texture
   color.rgb *= tex2D (ColorTexture, In.uv.yx);
   color.a = tex2D (AlphaTexture, In.uv.yx).r;

   return color;
}



]]></RmShaderCode>
      <RmSampler NAME="AlphaTexture" API="" REGISTER="1"/>
      <RmSampler NAME="ColorTexture" API="" REGISTER="0"/>
      <RmShaderConstant NAME="Kd" API="" REGISTER="1"/>
      <RmShaderConstant NAME="Ks" API="" REGISTER="3"/>
      <RmShaderConstant NAME="lightDir" API="" REGISTER="0"/>
      <RmShaderConstant NAME="specularity" API="" REGISTER="2"/>
     </RmHLSLShader>
     <RmHLSLShader NAME="Vertex Shader" API="D3D" PIXEL_SHADER="FALSE" TARGET="vs_2_0" ENTRY_POINT="vs_main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float4x4 view_proj_matrix;
float displacement;
float4 view_position;
float4x4 view_matrix;
float4x4 inv_view_matrix;

struct VS_INPUT 
{
   float4 Pos:     POSITION;
   float3 Normal:  NORMAL;
   float3 Color:   COLOR0;
   float2 uv:      TEXCOORD0;
   float3 Tangent: TANGENT0;
   float3 Binormal:BINORMAL0;
};

struct VS_OUTPUT 
{
   float4 Pos:     POSITION;
   float2 uv:      TEXCOORD0;
   float3 Tangent: TEXCOORD1;
   float3 viewDir: TEXCOORD2;
};

VS_OUTPUT vs_main( VS_INPUT In )
{
   VS_OUTPUT Out;
	
   Out.Pos = mul(view_proj_matrix, In.Pos);

   Out.Tangent = In.Tangent;
   
   // compute normalized vector from vertex to camera
   Out.viewDir = normalize (mul(inv_view_matrix, view_position) -  In.Pos);
   
   Out.uv = In.uv;
   
   return Out;
}



]]></RmShaderCode>
      <RmShaderConstant NAME="inv_view_matrix" API="" REGISTER="4"/>
      <RmShaderConstant NAME="view_position" API="" REGISTER="8"/>
      <RmShaderConstant NAME="view_proj_matrix" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
     <RmTextureObject NAME="AlphaTexture" API="D3D" STATE_INDEX="1" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HairStrandAlpha" API=""/>
     </RmTextureObject>
     <RmTextureObject NAME="ColorTexture" API="D3D" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="HairStrand" API=""/>
      <RmState NAME="D3DSAMP_MINFILTER" API="D3D" STATE="6" VALUE="3" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MAXANISOTROPY" API="D3D" STATE="10" VALUE="4" USAGE="SAMPLER_STATE"/>
      <RmState NAME="D3DSAMP_MIPFILTER" API="D3D" STATE="7" VALUE="2" USAGE="SAMPLER_STATE"/>
     </RmTextureObject>
    </RmPass>
   </RmDirectXEffect>
  </RmEffectGroup>
 </RmEffectWorkspace>
</RENDER_MONKEY>
