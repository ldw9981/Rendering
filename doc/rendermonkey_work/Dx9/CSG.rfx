<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<!DOCTYPE RENDER_MONKEY [
   <!ELEMENT RENDER_MONKEY
   (
      RmEffectWorkspace |
      RmRegistryBranch |
      RmClipboardNode
   )?>

   <!ELEMENT RmEffectWorkspace 
   (
      RmRegistryBranch?,
      RmPlugInData?,
      RmStringVariable*,
      (
         ( RmDirectXEffect, RmOpenGLEffect?, RmOpenGLESEffect? ) |
         ( RmOpenGLEffect, RmDirectXEffect?, RmOpenGLESEffect? ) |
         ( RmOpenGLESEffect, RmDirectXEffect?, RmOpenGLEffect? )
      )?,
      (
         RmBooleanVariable |
         RmIntegerVariable |
         RmFloatVariable |
         RmVectorVariable |
         RmMatrixVariable |
         RmDynamicVariable |
         RmColorVariable |
         Rm2DTextureVariable |
         RmCubemapVariable |
         Rm3DTextureVariable |
         RmLightVariable |
         RmMaterialVariable |
         RmRenderableTexture |
         RmStreamMap |
         RmModelData |
         RmEffectGroup
      )*
   )>

   <!ELEMENT RmEffectGroup
   ( 
      RmPlugInData?,
      (
         RmStringVariable |
         RmDirectXEffect |
         RmOpenGLEffect |
         RmOpenGLESEffect |
         RmBooleanVariable |
         RmIntegerVariable |
         RmFloatVariable |
         RmVectorVariable |
         RmMatrixVariable |
         RmDynamicVariable |
         RmColorVariable |
         Rm2DTextureVariable |
         RmCubemapVariable |
         Rm3DTextureVariable |
         RmLightVariable |
         RmMaterialVariable |
         RmRenderableTexture |
         RmStreamMap |
         RmModelData
      )*
   )>

   <!ELEMENT RmDirectXEffect
   ( 
      RmPlugInData?,
      (
         RmStringVariable |
         RmCamera |
         RmBooleanVariable |
         RmIntegerVariable |
         RmFloatVariable |
         RmVectorVariable |
         RmMatrixVariable |
         RmDynamicVariable |
         RmColorVariable |
         Rm2DTextureVariable |
         RmCubemapVariable |
         Rm3DTextureVariable |
         RmLightVariable |
         RmMaterialVariable |
         RmRenderableTexture |
         RmStreamMap |
         RmModelData |
         RmPass
      )*
   )>

   <!ELEMENT RmOpenGLEffect
   (
      RmPlugInData?,
      (
         RmStringVariable |
         RmCamera |
         RmBooleanVariable |
         RmIntegerVariable |
         RmFloatVariable |
         RmVectorVariable |
         RmMatrixVariable |
         RmDynamicVariable |
         RmColorVariable |
         Rm2DTextureVariable |
         RmCubemapVariable |
         Rm3DTextureVariable |
         RmLightVariable |
         RmMaterialVariable |
         RmRenderableTexture |
         RmStreamMap |
         RmModelData |
         RmGLPass
      )*
   )>
   
   <!ELEMENT RmOpenGLESEffect
   (
      RmPlugInData?,
      (
         RmStringVariable |
         RmCamera |
         RmBooleanVariable |
         RmIntegerVariable |
         RmFloatVariable |
         RmVectorVariable |
         RmMatrixVariable |
         RmDynamicVariable |
         RmColorVariable |
         Rm2DTextureVariable |
         RmCubemapVariable |
         Rm3DTextureVariable |
         RmLightVariable |
         RmMaterialVariable |
         RmRenderableTexture |
         RmStreamMap |
         RmModelData |
         RmGLESPass
      )*
   )>

   <!ELEMENT RmPass
   ( 
      RmPlugInData?,
      RmStringVariable*,
      RmCameraReference?,
      RmModelReference?,
      RmRenderStateBlock?,
      (
         (
         ( RmHLSLShader | RmShader ),
         ( RmShader | RmHLSLShader )?
         )
      )?,
      RmRenderTarget*,
      RmStreamMapReference?,
      (
         RmBooleanVariable |
         RmIntegerVariable |
         RmFloatVariable |
         RmVectorVariable |
         RmMatrixVariable |
         RmDynamicVariable |
         RmColorVariable |
         Rm2DTextureVariable |
         RmCubemapVariable |
         Rm3DTextureVariable |
         RmLightVariable |
         RmMaterialVariable |
         RmTextureObject |
         RmLightObject |
         RmMaterialObject
         )*
      )>
                                                                     
   <!ELEMENT RmGLPass
   ( 
      RmPlugInData?,
      RmStringVariable*,
      RmCameraReference?,
      RmModelReference?,
      RmRenderStateBlock?,
      (
         ( RmGLShader, RmGLShader? ) 
      )?,
      RmRenderTarget?,
      RmStreamMapReference?,
      (
         RmBooleanVariable |
         RmIntegerVariable |
         RmFloatVariable |
         RmVectorVariable |
         RmMatrixVariable |
         RmDynamicVariable |
         RmColorVariable |
         Rm2DTextureVariable |
         RmCubemapVariable |
         Rm3DTextureVariable |
         RmLightVariable |
         RmMaterialVariable |
         RmTextureObject |
         RmLightObject |
         RmMaterialObject |
         RmShaderConstant |
         RmSampler
         )*
      )>

   <!ELEMENT RmGLESPass
   ( 
      RmPlugInData?,
      RmStringVariable*,
      RmCameraReference?,
      RmModelReference?,
      RmRenderStateBlock?,
      (
         ( RmGLESShader, RmGLESShader? ) 
      )?,
      RmRenderTarget?,
      RmStreamMapReference?,
      (
         RmBooleanVariable |
         RmIntegerVariable |
         RmFloatVariable |
         RmVectorVariable |
         RmMatrixVariable |
         RmDynamicVariable |
         RmColorVariable |
         Rm2DTextureVariable |
         RmCubemapVariable |
         Rm3DTextureVariable |
         RmLightVariable |
         RmMaterialVariable |
         RmTextureObject |
         RmLightObject |
         RmMaterialObject |
         RmShaderConstant |
         RmSampler
         )*
      )>      
      
   <!ELEMENT RmShader
   ( 
      RmShaderCode,
      RmPlugInData?,
      (
      RmStringVariable |
      RmShaderConstant
      )*
   )>

   <!ELEMENT RmHLSLShader
   ( 
      RmShaderCode,
      RmPlugInData?,
      (
      RmStringVariable |
      RmShaderConstant |
      RmSampler
      )*
   )>

   <!ELEMENT RmGLShader
   ( 
      RmShaderCode,
      RmPlugInData?,
      (
      RmStringVariable
      )*
   )>

   <!ELEMENT RmGLESShader
   ( 
      RmShaderCode,
      RmPlugInData?,
      (
      RmStringVariable
      )*
   )>
   
   <!ELEMENT RmTextureObject
   (
      RmPlugInData?,
      RmStringVariable*,
      RmTextureReference?,
      RmState*
   )>

   <!ELEMENT RmLightObject
   (
      RmPlugInData?,
      RmStringVariable*,
      RmLightReference?
   )>
   
   <!ELEMENT RmMaterialObject
   (
      RmPlugInData?,
      RmStringVariable*,
      RmMaterialReference?
   )>
   
   <!ELEMENT RmRenderStateBlock
   (
      RmPlugInData?,
      (
         RmStringVariable |
         RmState 
      )*
   )>

   <!ELEMENT RmStreamMap
   (
      RmPlugInData?,
      (
         RmStringVariable |
         RmStream 
      )*
   )>

   <!ELEMENT RmStream               ( RmPlugInData?, RmStreamChannel* )>

   <!ELEMENT RmModelData            ( RmPlugInData?, RmStringVariable* )>  
   <!ELEMENT RmTextureReference     ( RmPlugInData?, RmStringVariable* )>
   <!ELEMENT RmLightReference       ( RmPlugInData?, RmStringVariable* )>
   <!ELEMENT RmMaterialReference    ( RmPlugInData?, RmStringVariable* )>
   <!ELEMENT RmCameraReference      ( RmPlugInData?, RmStringVariable* )>
   <!ELEMENT RmModelReference       ( RmPlugInData?, RmStringVariable* )>
   <!ELEMENT RmStreamMapReference   ( RmPlugInData?, RmStringVariable* )>   
   <!ELEMENT RmRenderableTexture    ( RmPlugInData?, RmStringVariable* )>   
   <!ELEMENT RmRenderTarget         ( RmPlugInData?, RmStringVariable* )>   
   <!ELEMENT RmBooleanVariable      ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT RmFloatVariable        ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT RmVectorVariable       ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT RmMatrixVariable       ( RmPlugInData?, RmStringVariable? )>   
   <!ELEMENT RmColorVariable        ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT RmIntegerVariable      ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT Rm2DTextureVariable    ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT RmCubemapVariable      ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT Rm3DTextureVariable    ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT RmLightVariable        ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT RmMaterialVariable     ( RmPlugInData?, RmStringVariable? )>
   <!ELEMENT RmCamera               ( RmPlugInData?, RmStringVariable* )>

   <!ELEMENT RmStringVariable       ( RmTextDataBlock, RmPlugInData? )>
   
   <!ELEMENT RmDynamicVariable
   (
      RmDynamicVariableValueContainer,
      RmPlugInData?,
      RmStringVariable?
   )>
   
   <!ELEMENT RmDynamicVariableValueContainer
   (
      RmPlugInData?,
      RmDynamicVariableValue*
   )>
   
   <!ELEMENT RmTextDataBlock        ( #PCDATA ) >
   
   <!ELEMENT RmRegistryBranch
   ( 
      RmTextDataBlock?,
      (
         RmRegistryBranch |
         RmStringVariable |
         RmIntegerVariable |
         RmBooleanVariable |
         RmFloatVariable
      )*      
   )>

   <!ELEMENT RmPlugInData
   ( 
      RmTextDataBlock?,
      (
         RmStringVariable |
         RmIntegerVariable |
         RmBooleanVariable |
         RmFloatVariable |
         RmVectorVariable
      )*      
   )>
   
   <!ELEMENT RmClipboardNode
   (
      RmTextDataBlock?,
      (
         RmEffectWorkspace |
         RmEffectGroup |
         RmDirectXEffect |
         RmOpenGLEffect |
         RmOpenGLESEffect |
         RmPass |
         RmGLPass |
         RmGLESPass |
         RmShader |
         RmHLSLShader |
         RmGLShader |
         RmGLESShader |
         RmShaderConstant |
         RmSampler |
         RmTextureObject |
         RmLightObject |
         RmMaterialObject |
         RmRenderStateBlock |
         RmState |
         RmStreamMap |
         RmStream |
         RmStreamChannel |
         RmModelData |
         RmTextureReference |
         RmLightReference |
         RmMaterialReference |
         RmModelReference |
         RmStreamMapReference |
         RmRenderableTexture |
         RmRenderTarget |
         RmBooleanVariable |
         RmFloatVariable |
         RmVectorVariable |
         RmMatrixVariable |
         RmDynamicVariable |
         RmDynamicVariableValue |
         RmColorVariable |
         RmIntegerVariable |
         RmStringVariable |
         Rm2DTextureVariable |
         RmCubemapVariable |
         Rm3DTextureVariable |
         RmLightVariable |
         RmMaterialVariable |
         RmRegistryBranch |
         RmPlugInData |
         RmCamera |
         RmCameraReference
      )*      
   )>
   
   <!ELEMENT RmStreamChannel        ( RmPlugInData? ) >
   <!ELEMENT RmShaderConstant       ( RmPlugInData? ) >
   <!ELEMENT RmSampler              ( RmPlugInData? ) >
   <!ELEMENT RmState                ( RmPlugInData? ) >
   <!ELEMENT RmDynamicVariableValue ( RmPlugInData? ) >
   
   <!ELEMENT RmShaderCode           ( #PCDATA ) >

   <!ATTLIST RmEffectWorkspace 
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ACTIVE_EFFECT                 CDATA #REQUIRED
      VALIDATION_STRING             CDATA #REQUIRED
      XML_VERSION                   CDATA #REQUIRED
   >                                 

   <!ATTLIST RmEffectGroup           
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
   >                                 

   <!ATTLIST RmDirectXEffect                
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ACTIVE_CAMERA                 CDATA #REQUIRED
   >                                 

   <!ATTLIST RmOpenGLEffect                
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ACTIVE_CAMERA                 CDATA #REQUIRED
   >                                 
   
   <!ATTLIST RmOpenGLESEffect                
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ACTIVE_CAMERA                 CDATA #REQUIRED
   >                                 

   <!ATTLIST RmPass                  
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      PASS_INDEX                    CDATA #REQUIRED
      ENABLED                       ( TRUE | FALSE ) #REQUIRED
   >                                 

   <!ATTLIST RmGLPass                  
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      PASS_INDEX                    CDATA #REQUIRED
      ENABLED                       ( TRUE | FALSE ) #REQUIRED
   >                                 
   
   <!ATTLIST RmGLESPass                  
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      PASS_INDEX                    CDATA #REQUIRED
      ENABLED                       ( TRUE | FALSE ) #REQUIRED
   >                                 
   
   <!ATTLIST RmShader        
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      PIXEL_SHADER                  CDATA #REQUIRED
   >                                 

   <!ATTLIST RmHLSLShader        
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      PIXEL_SHADER                  ( TRUE | FALSE ) #REQUIRED
      TARGET                        CDATA #REQUIRED
      ENTRY_POINT                   CDATA #REQUIRED
      COMPILER_FLAGS                CDATA #REQUIRED
   >  

   <!ATTLIST RmGLShader        
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      PIXEL_SHADER                  ( TRUE | FALSE ) #REQUIRED
   >  
   
   <!ATTLIST RmGLESShader        
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      PIXEL_SHADER                  ( TRUE | FALSE ) #REQUIRED
   >  

   <!ATTLIST RmShaderConstant
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      REGISTER                      CDATA #REQUIRED
   >                                 

   <!ATTLIST RmSampler               
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      REGISTER                      CDATA #REQUIRED
   >

   <!ATTLIST RmTextureObject
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      STATE_INDEX                   CDATA #REQUIRED
      VERTEX_TEXTURE                ( TRUE | FALSE ) #REQUIRED
   >

   <!ATTLIST RmLightObject
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      INDEX                         CDATA #REQUIRED
   >
   
   <!ATTLIST RmMaterialObject
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      INDEX                         CDATA #REQUIRED
   >
   
   <!ATTLIST RmRenderStateBlock
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
   >                                 

   <!ATTLIST RmState                 
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      STATE                         CDATA #REQUIRED
      VALUE                         CDATA #REQUIRED
      USAGE                         CDATA #REQUIRED
   >                               

   <!ATTLIST RmStreamMap           
     NAME                           CDATA #REQUIRED
     API                            CDATA #REQUIRED
   >                               

   <!ATTLIST RmStream              
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      STRIDE                        CDATA #REQUIRED
   >

   <!ATTLIST RmStreamChannel
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      DATA_SIZE                     CDATA #REQUIRED
      DATA_TYPE                     CDATA #REQUIRED
      REGISTER                      CDATA #REQUIRED
      USAGE                         CDATA #REQUIRED
      USAGE_INDEX                   CDATA #REQUIRED
      ATTRIBUTE_NAME                CDATA #REQUIRED
   >

   <!ATTLIST RmModelData
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      FILE_NAME                     CDATA #REQUIRED
      ORIENTATION                   CDATA #REQUIRED
   >

   <!ATTLIST RmTextureReference
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
   >

   <!ATTLIST RmLightReference
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
   >
   
   <!ATTLIST RmMaterialReference
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
   >
   
   <!ATTLIST RmModelReference
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
   >

   <!ATTLIST RmStreamMapReference
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
   >

   <!ATTLIST RmRenderableTexture
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      FILE_NAME                     CDATA #REQUIRED
      ORIGIN                        CDATA #REQUIRED
      WIDTH                         CDATA #REQUIRED
      HEIGHT                        CDATA #REQUIRED
      FORMAT                        CDATA #REQUIRED
      USE_VIEWPORT_DIMENSIONS       ( TRUE | FALSE ) #REQUIRED
      GENERATE_MIPMAPS              ( TRUE | FALSE ) #REQUIRED
      WIDTH_RATIO                   CDATA #REQUIRED
      HEIGHT_RATIO                  CDATA #REQUIRED
   >

   <!ATTLIST RmRenderTarget
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      INDEX                         CDATA #REQUIRED
      RENDER_TO_SCREEN              ( TRUE | FALSE ) #REQUIRED
      COLOR_CLEAR                   ( TRUE | FALSE ) #REQUIRED
      DEPTH_CLEAR                   ( TRUE | FALSE ) #REQUIRED
      CLEAR_COLOR_VALUE             CDATA #REQUIRED
      DEPTH_CLEAR_VALUE             CDATA #REQUIRED
   >
   
   <!ATTLIST RmBooleanVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      VALUE                         CDATA #REQUIRED
   >

   <!ATTLIST RmFloatVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      VALUE                         CDATA #REQUIRED
      MIN                           CDATA #REQUIRED
      MAX                           CDATA #REQUIRED
      CLAMP                         ( TRUE | FALSE ) #REQUIRED
   >

   <!ATTLIST RmVectorVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      VALUE_0                       CDATA #REQUIRED
      VALUE_1                       CDATA #REQUIRED
      VALUE_2                       CDATA #REQUIRED
      VALUE_3                       CDATA #REQUIRED
      MIN                           CDATA #REQUIRED
      MAX                           CDATA #REQUIRED
      CLAMP                         ( TRUE | FALSE ) #REQUIRED
      NORMALIZE                     ( TRUE | FALSE ) #REQUIRED
   >

   <!ATTLIST RmMatrixVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      VALUE_0                       CDATA #REQUIRED
      VALUE_1                       CDATA #REQUIRED
      VALUE_2                       CDATA #REQUIRED
      VALUE_3                       CDATA #REQUIRED
      VALUE_4                       CDATA #REQUIRED
      VALUE_5                       CDATA #REQUIRED
      VALUE_6                       CDATA #REQUIRED
      VALUE_7                       CDATA #REQUIRED
      VALUE_8                       CDATA #REQUIRED
      VALUE_9                       CDATA #REQUIRED
      VALUE_10                      CDATA #REQUIRED
      VALUE_11                      CDATA #REQUIRED
      VALUE_12                      CDATA #REQUIRED
      VALUE_13                      CDATA #REQUIRED
      VALUE_14                      CDATA #REQUIRED
      VALUE_15                      CDATA #REQUIRED
   >

   <!ATTLIST RmDynamicVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      VARIABLE_TYPE                 ( FLOAT | INTEGER | BOOLEAN ) #REQUIRED
      ROWS                          CDATA #REQUIRED
      COLUMNS                       CDATA #REQUIRED
      FIXED_SIZE                    ( TRUE | FALSE ) #REQUIRED
      MIN                           CDATA #REQUIRED
      MAX                           CDATA #REQUIRED
      CLAMP                         ( TRUE | FALSE ) #REQUIRED
      NORMALIZE                     ( TRUE | FALSE ) #REQUIRED
   >
   
   <!ATTLIST RmDynamicVariableValue
      ROW_INDEX                     CDATA #REQUIRED
      COLUMN_INDEX                  CDATA #REQUIRED
      VALUE                         CDATA #REQUIRED
   >
   
   <!ATTLIST RmColorVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      VALUE_0                       CDATA #REQUIRED
      VALUE_1                       CDATA #REQUIRED
      VALUE_2                       CDATA #REQUIRED
      VALUE_3                       CDATA #REQUIRED
   >

   <!ATTLIST RmIntegerVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      VALUE                         CDATA #REQUIRED
      MIN                           CDATA #REQUIRED
      MAX                           CDATA #REQUIRED
      CLAMP                         ( TRUE | FALSE ) #REQUIRED
   >
   
   <!ATTLIST RmStringVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
   >

   <!ATTLIST Rm2DTextureVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      FILE_NAME                     CDATA #REQUIRED
      ORIGIN                        CDATA #REQUIRED
   >

   <!ATTLIST RmCubemapVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      FILE_NAME                     CDATA #REQUIRED
      ORIGIN                        CDATA #REQUIRED
   >

   <!ATTLIST Rm3DTextureVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      FILE_NAME                     CDATA #REQUIRED
      ORIGIN                        CDATA #REQUIRED
   >

   <!ATTLIST RmLightVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      LIGHT_ENABLED                 ( TRUE | FALSE ) #REQUIRED
      LIGHT_TYPE                    ( POSITIONAL | DIRECTIONAL | SPOTLIGHT ) #REQUIRED
      AMBIENT_0                     CDATA #REQUIRED
      AMBIENT_1                     CDATA #REQUIRED
      AMBIENT_2                     CDATA #REQUIRED
      AMBIENT_3                     CDATA #REQUIRED
      DIFFUSE_0                     CDATA #REQUIRED
      DIFFUSE_1                     CDATA #REQUIRED
      DIFFUSE_2                     CDATA #REQUIRED
      DIFFUSE_3                     CDATA #REQUIRED
      SPECULAR_0                    CDATA #REQUIRED
      SPECULAR_1                    CDATA #REQUIRED
      SPECULAR_2                    CDATA #REQUIRED
      SPECULAR_3                    CDATA #REQUIRED
      POSITION_0                    CDATA #REQUIRED
      POSITION_1                    CDATA #REQUIRED
      POSITION_2                    CDATA #REQUIRED
      DIRECTION_0                   CDATA #REQUIRED
      DIRECTION_1                   CDATA #REQUIRED
      DIRECTION_2                   CDATA #REQUIRED
      ATTENUATION_0                 CDATA #REQUIRED
      ATTENUATION_1                 CDATA #REQUIRED
      ATTENUATION_2                 CDATA #REQUIRED
      SPOTLIGHT_THETA               CDATA #REQUIRED
      SPOTLIGHT_PHI                 CDATA #REQUIRED
      RANGE                         CDATA #REQUIRED
      FALLOFF                       CDATA #REQUIRED
   >
   
   <!ATTLIST RmMaterialVariable
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      ARTIST_EDITABLE               ( TRUE | FALSE ) #REQUIRED
      VARIABLE_SEMANTIC             CDATA #REQUIRED
      AMBIENT_0                     CDATA #REQUIRED
      AMBIENT_1                     CDATA #REQUIRED
      AMBIENT_2                     CDATA #REQUIRED
      AMBIENT_3                     CDATA #REQUIRED
      DIFFUSE_0                     CDATA #REQUIRED
      DIFFUSE_1                     CDATA #REQUIRED
      DIFFUSE_2                     CDATA #REQUIRED
      DIFFUSE_3                     CDATA #REQUIRED
      SPECULAR_0                    CDATA #REQUIRED
      SPECULAR_1                    CDATA #REQUIRED
      SPECULAR_2                    CDATA #REQUIRED
      SPECULAR_3                    CDATA #REQUIRED
      EMISSIVE_0                    CDATA #REQUIRED
      EMISSIVE_1                    CDATA #REQUIRED
      EMISSIVE_2                    CDATA #REQUIRED
      EMISSIVE_3                    CDATA #REQUIRED
      SPECULAR_POWER                CDATA #REQUIRED
   >
      
   <!ATTLIST RmRegistryBranch
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      XML_VERSION                   CDATA #REQUIRED
   >
   
   <!ATTLIST RmPlugInData
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      PLUGIN_GUID                   CDATA #REQUIRED
   >

   <!ATTLIST RmClipboardNode
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      XML_VERSION                   CDATA #REQUIRED
   >
   
   <!ATTLIST RmCamera                
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      CAMERA_POSITION_X             CDATA #REQUIRED
      CAMERA_POSITION_Y             CDATA #REQUIRED
      CAMERA_POSITION_Z             CDATA #REQUIRED
      LOOK_AT_VECTOR_X              CDATA #REQUIRED
      LOOK_AT_VECTOR_Y              CDATA #REQUIRED
      LOOK_AT_VECTOR_Z              CDATA #REQUIRED
      UP_VECTOR_X                   CDATA #REQUIRED
      UP_VECTOR_Y                   CDATA #REQUIRED
      UP_VECTOR_Z                   CDATA #REQUIRED
      FOV                           CDATA #REQUIRED
      NEAR_CLIP_PLANE               CDATA #REQUIRED
      FAR_CLIP_PLANE                CDATA #REQUIRED
   >                                 

   <!ATTLIST RmCameraReference                
      NAME                          CDATA #REQUIRED
      API                           CDATA #REQUIRED
      USE_ACTIVE_CAMERA             ( TRUE | FALSE ) #REQUIRED
   >                               
   
   <!ATTLIST RmShaderCode                
      TYPE                          ( TEXT ) #REQUIRED
   >                               
   
   <!ATTLIST RmTextDataBlock                
      TYPE                          ( TEXT ) #REQUIRED
   >                               
   
]>
<RENDER_MONKEY>
 <RmEffectWorkspace NAME="Effect Workspace" API="" ACTIVE_EFFECT="Effect Workspace.CSG.Subtract" VALIDATION_STRING="" XML_VERSION="RenderMonkey 1.71">
  <RmRegistryBranch NAME="RM_REGISTRY" API="" XML_VERSION="RenderMonkey 1.71">
   <RmRegistryBranch NAME="RM_LOCAL" API="" XML_VERSION="RenderMonkey 1.71">
    <RmRegistryBranch NAME="WORKSPACE" API="" XML_VERSION="RenderMonkey 1.71">
     <RmStringVariable NAME="LAST_SAVE" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
11/7/2007 8:48:54]]></RmTextDataBlock></RmStringVariable>
     <RmStringVariable NAME="VERSION" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
RenderMonkey Version 1.71 (build 47)]]></RmTextDataBlock></RmStringVariable>
     <RmStringVariable NAME="XML_VERSION" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
RenderMonkey 1.71]]></RmTextDataBlock></RmStringVariable>
     <RmStringVariable NAME="BASE_WORKSPACE_PATH" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
C:\p4\3darg\Tools\RenderMonkey\Examples\DX9\]]></RmTextDataBlock></RmStringVariable>
    </RmRegistryBranch>
   </RmRegistryBranch>
  </RmRegistryBranch>
  <RmStringVariable NAME="Header" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
$File: //depot/3darg/Tools/RenderMonkey/Examples/DX9/CSG.rfx $
$Revision: #9 $

© AMD, 2007]]></RmTextDataBlock></RmStringVariable>
  <RmEffectGroup NAME="CSG" API="">
   <RmDirectXEffect NAME="Subtract" API="D3D" ACTIVE_CAMERA="Camera">
    <RmStringVariable NAME="Notes" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
Constructive Solid Geometry  ( aka CSG ) operation using stencil buffer.

This effect is showing Object A - B.

Modify the position of object A & B by controling Pos_1 and Pos_2 to see the
result.

Disable "Object B Ghost" pass to see the actual result of subtraction.]]></RmTextDataBlock></RmStringVariable>
    <RmCamera NAME="Camera" API="" CAMERA_POSITION_X="-12.933925" CAMERA_POSITION_Y="52.631313" CAMERA_POSITION_Z="192.516266" LOOK_AT_VECTOR_X="0.000000" LOOK_AT_VECTOR_Y="0.000000" LOOK_AT_VECTOR_Z="0.000000" UP_VECTOR_X="0.003086" UP_VECTOR_Y="0.964651" UP_VECTOR_Z="-0.263514" FOV="45.000000" NEAR_CLIP_PLANE="1.000000" FAR_CLIP_PLANE="1000.000000"/>
    <RmPass NAME="Object B_Back" API="D3D" PASS_INDEX="3" ENABLED="TRUE">
     <RmCameraReference NAME="Camera" API="" USE_ACTIVE_CAMERA="FALSE"/>
     <RmModelReference NAME="Model_2" API=""/>
     <RmRenderStateBlock NAME="Render State" API="D3D">
      <RmState NAME="D3DRS_STENCILENABLE" API="D3D" STATE="52" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILFAIL" API="D3D" STATE="53" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILPASS" API="D3D" STATE="55" VALUE="5" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILFUNC" API="D3D" STATE="56" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILZFAIL" API="D3D" STATE="54" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILREF" API="D3D" STATE="57" VALUE="0" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_CULLMODE" API="D3D" STATE="22" VALUE="2" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmHLSLShader NAME="Vertex Shader" API="D3D" PIXEL_SHADER="FALSE" TARGET="vs_2_0" ENTRY_POINT="vs_main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float3 Pos_2;
float3 LightDir;
float4x4 matWorld;
float4x4 matViewProjection;

struct VS_INPUT 
{
   float3 Pos:        POSITION;
   float3 Normal:     NORMAL;
};

struct VS_OUTPUT 
{
   float4 Pos:     POSITION;
   float  Shade:   TEXCOORD0;
};

VS_OUTPUT vs_main( VS_INPUT In )
{
   VS_OUTPUT Out;

   float4x4 newWorldMat = matWorld;
   newWorldMat[0][3] = Pos_2.x;
   newWorldMat[1][3] = Pos_2.y;
   newWorldMat[2][3] = Pos_2.z;
   
   float4 Pos = mul(newWorldMat, float4(In.Pos,1.0)); 
   
   Out.Pos   = mul(matViewProjection, Pos);
   Out.Shade = dot(In.Normal,-normalize(LightDir));

   return Out;
}



]]></RmShaderCode>
      <RmShaderConstant NAME="LightDir" API="" REGISTER="9"/>
      <RmShaderConstant NAME="Pos_2" API="" REGISTER="8"/>
      <RmShaderConstant NAME="matViewProjection" API="" REGISTER="4"/>
      <RmShaderConstant NAME="matWorld" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmHLSLShader NAME="Pixel Shader" API="D3D" PIXEL_SHADER="TRUE" TARGET="ps_2_0" ENTRY_POINT="ps_main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float4 Color_2;
struct PS_INPUT 
{
   float  Shade:   TEXCOORD0;
};

struct PS_OUTPUT
{
   float4 Color : COLOR0;
};

PS_OUTPUT ps_main( PS_INPUT In )
{
   PS_OUTPUT Out;
   Out.Color = Color_2 * In.Shade;
   return Out;
}



]]></RmShaderCode>
      <RmShaderConstant NAME="Color_2" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
    </RmPass>
    <RmPass NAME="Object A Color" API="D3D" PASS_INDEX="4" ENABLED="TRUE">
     <RmCameraReference NAME="Camera" API="" USE_ACTIVE_CAMERA="FALSE"/>
     <RmModelReference NAME="Model_1" API=""/>
     <RmRenderStateBlock NAME="Render State" API="D3D">
      <RmState NAME="D3DRS_COLORWRITEENABLE" API="D3D" STATE="168" VALUE="15" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ZFUNC" API="D3D" STATE="23" VALUE="3" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILENABLE" API="D3D" STATE="52" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILFAIL" API="D3D" STATE="53" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILFUNC" API="D3D" STATE="56" VALUE="3" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILREF" API="D3D" STATE="57" VALUE="0" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_CULLMODE" API="D3D" STATE="22" VALUE="3" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmHLSLShader NAME="Vertex Shader" API="D3D" PIXEL_SHADER="FALSE" TARGET="vs_2_0" ENTRY_POINT="vs_main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float3 Pos_1;
float3 LightDir;
float4x4 matWorld;
float4x4 matViewProjection;

struct VS_INPUT 
{
   float3 Pos:        POSITION;
   float3 Normal:     NORMAL;
};

struct VS_OUTPUT 
{
   float4 Pos:     POSITION;
   float  Shade:   TEXCOORD0;
};

VS_OUTPUT vs_main( VS_INPUT In )
{
   VS_OUTPUT Out;

   float4x4 newWorldMat = matWorld;
   newWorldMat[0][3] = Pos_1.x;
   newWorldMat[1][3] = Pos_1.y;
   newWorldMat[2][3] = Pos_1.z;
   
   float4 Pos = mul(newWorldMat, float4(In.Pos,1.0)); 
   
   Out.Pos   = mul(matViewProjection, Pos);
   Out.Shade = max(dot(In.Normal,-normalize(LightDir)),0.4);

   return Out;
}



]]></RmShaderCode>
      <RmShaderConstant NAME="LightDir" API="" REGISTER="9"/>
      <RmShaderConstant NAME="Pos_1" API="" REGISTER="8"/>
      <RmShaderConstant NAME="matViewProjection" API="" REGISTER="4"/>
      <RmShaderConstant NAME="matWorld" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmHLSLShader NAME="Pixel Shader" API="D3D" PIXEL_SHADER="TRUE" TARGET="ps_2_0" ENTRY_POINT="ps_main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float4 Color_1;
struct PS_INPUT 
{
   float  Shade:   TEXCOORD0;
};

struct PS_OUTPUT
{
   float4 Color : COLOR0;
};

PS_OUTPUT ps_main( PS_INPUT In )
{
   PS_OUTPUT Out;
   Out.Color = Color_1 * In.Shade;
   return Out;
}



]]></RmShaderCode>
      <RmShaderConstant NAME="Color_1" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
    </RmPass>
    <RmPass NAME="Object A Subtracted Part" API="D3D" PASS_INDEX="5" ENABLED="TRUE">
     <RmCameraReference NAME="Camera" API="" USE_ACTIVE_CAMERA="FALSE"/>
     <RmModelReference NAME="Model_2" API=""/>
     <RmRenderStateBlock NAME="Render State" API="D3D">
      <RmState NAME="D3DRS_STENCILENABLE" API="D3D" STATE="52" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILFAIL" API="D3D" STATE="53" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILPASS" API="D3D" STATE="55" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILFUNC" API="D3D" STATE="56" VALUE="6" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILZFAIL" API="D3D" STATE="54" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILREF" API="D3D" STATE="57" VALUE="0" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_CULLMODE" API="D3D" STATE="22" VALUE="2" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ZFUNC" API="D3D" STATE="23" VALUE="8" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmHLSLShader NAME="Vertex Shader" API="D3D" PIXEL_SHADER="FALSE" TARGET="vs_2_0" ENTRY_POINT="vs_main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float3 Pos_2;
float3 LightDir;
float4x4 matWorld;
float4x4 matViewProjection;

struct VS_INPUT 
{
   float3 Pos:        POSITION;
   float3 Normal:     NORMAL;
};

struct VS_OUTPUT 
{
   float4 Pos:     POSITION;
   float  Shade:   TEXCOORD0;
};

VS_OUTPUT vs_main( VS_INPUT In )
{
   VS_OUTPUT Out;

   float4x4 newWorldMat = matWorld;
   newWorldMat[0][3] = Pos_2.x;
   newWorldMat[1][3] = Pos_2.y;
   newWorldMat[2][3] = Pos_2.z;
   
   float4 Pos = mul(newWorldMat, float4(In.Pos,1.0)); 
   
   Out.Pos   = mul(matViewProjection, Pos);
   Out.Shade = max(dot(-In.Normal,-normalize(LightDir)),0.4);

   return Out;
}



]]></RmShaderCode>
      <RmShaderConstant NAME="LightDir" API="" REGISTER="9"/>
      <RmShaderConstant NAME="Pos_2" API="" REGISTER="8"/>
      <RmShaderConstant NAME="matViewProjection" API="" REGISTER="4"/>
      <RmShaderConstant NAME="matWorld" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmHLSLShader NAME="Pixel Shader" API="D3D" PIXEL_SHADER="TRUE" TARGET="ps_2_0" ENTRY_POINT="ps_main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float4 Color_1;
struct PS_INPUT 
{
   float  Shade:   TEXCOORD0;
};

struct PS_OUTPUT
{
   float4 Color : COLOR0;
};

PS_OUTPUT ps_main( PS_INPUT In )
{
   PS_OUTPUT Out;
   Out.Color = Color_1 * In.Shade;
   return Out;
}



]]></RmShaderCode>
      <RmShaderConstant NAME="Color_1" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
    </RmPass>
    <RmPass NAME="Object B Ghost" API="D3D" PASS_INDEX="6" ENABLED="TRUE">
     <RmCameraReference NAME="Camera" API="" USE_ACTIVE_CAMERA="FALSE"/>
     <RmModelReference NAME="Model_2" API=""/>
     <RmRenderStateBlock NAME="Render State" API="D3D">
      <RmState NAME="D3DRS_STENCILENABLE" API="D3D" STATE="52" VALUE="0" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILREF" API="D3D" STATE="57" VALUE="0" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_CULLMODE" API="D3D" STATE="22" VALUE="3" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ZFUNC" API="D3D" STATE="23" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ZENABLE" API="D3D" STATE="7" VALUE="0" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ZWRITEENABLE" API="D3D" STATE="14" VALUE="0" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ALPHABLENDENABLE" API="D3D" STATE="27" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ALPHAFUNC" API="D3D" STATE="25" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_BLENDOP" API="D3D" STATE="171" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_DESTBLEND" API="D3D" STATE="20" VALUE="2" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_SRCBLEND" API="D3D" STATE="19" VALUE="2" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmHLSLShader NAME="Vertex Shader" API="D3D" PIXEL_SHADER="FALSE" TARGET="vs_2_0" ENTRY_POINT="vs_main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float3 Pos_2;
float3 LightDir;
float4x4 matWorld;
float4x4 matViewProjection;

struct VS_INPUT 
{
   float3 Pos:        POSITION;
   float3 Normal:     NORMAL;
};

struct VS_OUTPUT 
{
   float4 Pos:     POSITION;
   float  Shade:   TEXCOORD0;
};

VS_OUTPUT vs_main( VS_INPUT In )
{
   VS_OUTPUT Out;

   float4x4 newWorldMat = matWorld;
   newWorldMat[0][3] = Pos_2.x;
   newWorldMat[1][3] = Pos_2.y;
   newWorldMat[2][3] = Pos_2.z;
   
   float4 Pos = mul(newWorldMat, float4(In.Pos,1.0)); 
   
   Out.Pos   = mul(matViewProjection, Pos);
   Out.Shade = max(dot(-In.Normal,-normalize(LightDir)),0.4);

   return Out;
}



]]></RmShaderCode>
      <RmShaderConstant NAME="LightDir" API="" REGISTER="9"/>
      <RmShaderConstant NAME="Pos_2" API="" REGISTER="8"/>
      <RmShaderConstant NAME="matViewProjection" API="" REGISTER="4"/>
      <RmShaderConstant NAME="matWorld" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmHLSLShader NAME="Pixel Shader" API="D3D" PIXEL_SHADER="TRUE" TARGET="ps_2_0" ENTRY_POINT="ps_main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float4 Color_2;
struct PS_INPUT 
{
   float  Shade:   TEXCOORD0;
};

struct PS_OUTPUT
{
   float4 Color : COLOR0;
};

PS_OUTPUT ps_main( PS_INPUT In )
{
   PS_OUTPUT Out;
   Out.Color = Color_2 * In.Shade;
   return Out;
}



]]></RmShaderCode>
      <RmShaderConstant NAME="Color_2" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
    </RmPass>
    <RmPass NAME="Environment" API="D3D" PASS_INDEX="0" ENABLED="TRUE">
     <RmCameraReference NAME="Camera" API="" USE_ACTIVE_CAMERA="FALSE"/>
     <RmModelReference NAME="Sphere" API=""/>
     <RmRenderStateBlock NAME="Render State" API="D3D">
      <RmState NAME="D3DRS_ZENABLE" API="D3D" STATE="7" VALUE="0" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_CULLMODE" API="D3D" STATE="22" VALUE="2" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ZWRITEENABLE" API="D3D" STATE="14" VALUE="0" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmHLSLShader NAME="Vertex Shader" API="D3D" PIXEL_SHADER="FALSE" TARGET="vs_1_1" ENTRY_POINT="vs_main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float4 vViewPosition;
float4x4 matViewProjection;

struct VS_OUTPUT 
{
   float4 Pos:      POSITION;
   float3 TexCoord: TEXCOORD;
};

VS_OUTPUT vs_main( float4 inPos: POSITION,
                   float3 inNormal: NORMAL )
{
   VS_OUTPUT Out;

   Out.Pos = mul(matViewProjection, inPos+vViewPosition);
   Out.TexCoord = inNormal;

   return Out;
}



]]></RmShaderCode>
      <RmShaderConstant NAME="matViewProjection" API="" REGISTER="0"/>
      <RmShaderConstant NAME="vViewPosition" API="" REGISTER="4"/>
     </RmHLSLShader>
     <RmHLSLShader NAME="Pixel Shader" API="D3D" PIXEL_SHADER="TRUE" TARGET="ps_2_0" ENTRY_POINT="ps_main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
samplerCUBE MarsTexture;

float4 ps_main( float3 inNormal: TEXCOORD ) : COLOR0
{
   //  Output constant color:
   float4 color = texCUBE(MarsTexture,inNormal);
   return color;
}



]]></RmShaderCode>
      <RmSampler NAME="MarsTexture" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmStreamMapReference NAME="Environment Stream Mapping" API=""/>
     <RmTextureObject NAME="MarsTexture" API="D3D" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="Mars" API=""/>
     </RmTextureObject>
    </RmPass>
    <RmPass NAME="Object A_DepthOnly" API="D3D" PASS_INDEX="1" ENABLED="TRUE">
     <RmCameraReference NAME="Camera" API="" USE_ACTIVE_CAMERA="FALSE"/>
     <RmModelReference NAME="Model_1" API=""/>
     <RmRenderStateBlock NAME="Render State" API="D3D">
      <RmState NAME="D3DRS_ZENABLE" API="D3D" STATE="7" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ZFUNC" API="D3D" STATE="23" VALUE="2" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ZWRITEENABLE" API="D3D" STATE="14" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_COLORWRITEENABLE" API="D3D" STATE="168" VALUE="0" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_CULLMODE" API="D3D" STATE="22" VALUE="3" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmHLSLShader NAME="Vertex Shader" API="D3D" PIXEL_SHADER="FALSE" TARGET="vs_2_0" ENTRY_POINT="vs_main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float3 Pos_1;
float3 LightDir;
float4x4 matWorld;
float4x4 matViewProjection;

struct VS_INPUT 
{
   float3 Pos:        POSITION;
   float3 Normal:     NORMAL;
};

struct VS_OUTPUT 
{
   float4 Pos:     POSITION;
   float  Shade:   TEXCOORD0;
};

VS_OUTPUT vs_main( VS_INPUT In )
{
   VS_OUTPUT Out;

   float4x4 newWorldMat = matWorld;
   newWorldMat[0][3] = Pos_1.x;
   newWorldMat[1][3] = Pos_1.y;
   newWorldMat[2][3] = Pos_1.z;
   
   float4 Pos = mul(newWorldMat, float4(In.Pos,1.0)); 
   
   Out.Pos   = mul(matViewProjection, Pos);
   Out.Shade = dot(In.Normal,-normalize(LightDir));

   return Out;
}



]]></RmShaderCode>
      <RmShaderConstant NAME="LightDir" API="" REGISTER="9"/>
      <RmShaderConstant NAME="Pos_1" API="" REGISTER="8"/>
      <RmShaderConstant NAME="matViewProjection" API="" REGISTER="4"/>
      <RmShaderConstant NAME="matWorld" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmHLSLShader NAME="Pixel Shader" API="D3D" PIXEL_SHADER="TRUE" TARGET="ps_2_0" ENTRY_POINT="ps_main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float4 Color_1;
struct PS_INPUT 
{
   float  Shade:   TEXCOORD0;
};

struct PS_OUTPUT
{
   float4 Color : COLOR0;
};

PS_OUTPUT ps_main( PS_INPUT In )
{
   PS_OUTPUT Out;
   Out.Color = Color_1 * In.Shade;
   return Out;
}



]]></RmShaderCode>
      <RmShaderConstant NAME="Color_1" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
    </RmPass>
    <RmPass NAME="Object B_Front" API="D3D" PASS_INDEX="2" ENABLED="TRUE">
     <RmCameraReference NAME="Camera" API="" USE_ACTIVE_CAMERA="FALSE"/>
     <RmModelReference NAME="Model_2" API=""/>
     <RmRenderStateBlock NAME="Render State" API="D3D">
      <RmState NAME="D3DRS_STENCILENABLE" API="D3D" STATE="52" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILFAIL" API="D3D" STATE="53" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILPASS" API="D3D" STATE="55" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILFUNC" API="D3D" STATE="56" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILZFAIL" API="D3D" STATE="54" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILREF" API="D3D" STATE="57" VALUE="0" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ZWRITEENABLE" API="D3D" STATE="14" VALUE="0" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_CULLMODE" API="D3D" STATE="22" VALUE="3" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmHLSLShader NAME="Vertex Shader" API="D3D" PIXEL_SHADER="FALSE" TARGET="vs_2_0" ENTRY_POINT="vs_main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float3 Pos_2;
float3 LightDir;
float4x4 matWorld;
float4x4 matViewProjection;

struct VS_INPUT 
{
   float3 Pos:        POSITION;
   float3 Normal:     NORMAL;
};

struct VS_OUTPUT 
{
   float4 Pos:     POSITION;
   float  Shade:   TEXCOORD0;
};

VS_OUTPUT vs_main( VS_INPUT In )
{
   VS_OUTPUT Out;

   float4x4 newWorldMat = matWorld;
   newWorldMat[0][3] = Pos_2.x;
   newWorldMat[1][3] = Pos_2.y;
   newWorldMat[2][3] = Pos_2.z;
   
   float4 Pos = mul(newWorldMat, float4(In.Pos,1.0)); 
   
   Out.Pos   = mul(matViewProjection, Pos);
   Out.Shade = dot(In.Normal,-normalize(LightDir));

   return Out;
}



]]></RmShaderCode>
      <RmShaderConstant NAME="LightDir" API="" REGISTER="9"/>
      <RmShaderConstant NAME="Pos_2" API="" REGISTER="8"/>
      <RmShaderConstant NAME="matViewProjection" API="" REGISTER="4"/>
      <RmShaderConstant NAME="matWorld" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmHLSLShader NAME="Pixel Shader" API="D3D" PIXEL_SHADER="TRUE" TARGET="ps_2_0" ENTRY_POINT="ps_main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float4 Color_2;
struct PS_INPUT 
{
   float  Shade:   TEXCOORD0;
};

struct PS_OUTPUT
{
   float4 Color : COLOR0;
};

PS_OUTPUT ps_main( PS_INPUT In )
{
   PS_OUTPUT Out;
   Out.Color = Color_2 * In.Shade;
   return Out;
}



]]></RmShaderCode>
      <RmShaderConstant NAME="Color_2" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
    </RmPass>
   </RmDirectXEffect>
   <RmDirectXEffect NAME="Intersection" API="D3D" ACTIVE_CAMERA="Camera">
    <RmStringVariable NAME="Notes" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC=""><RmTextDataBlock TYPE="TEXT"><![CDATA[
Constructive Solid Geometry  ( aka CSG ) operation using stencil buffer.

This effect is showing Intersection of Object A & B.

Modify the position of object A & B by controling Pos_1 and Pos_2 to see the
result.

Disable "Object A/B Ghost" pass to see the actual result of intersection.]]></RmTextDataBlock></RmStringVariable>
    <RmCamera NAME="Camera" API="" CAMERA_POSITION_X="92.349121" CAMERA_POSITION_Y="40.946152" CAMERA_POSITION_Z="172.612411" LOOK_AT_VECTOR_X="0.000000" LOOK_AT_VECTOR_Y="0.000000" LOOK_AT_VECTOR_Z="0.000000" UP_VECTOR_X="0.020849" UP_VECTOR_Y="0.970225" UP_VECTOR_Z="-0.241306" FOV="45.000000" NEAR_CLIP_PLANE="1.000000" FAR_CLIP_PLANE="1000.000000"/>
    <RmPass NAME="Object A Color" API="D3D" PASS_INDEX="4" ENABLED="TRUE">
     <RmCameraReference NAME="Camera" API="" USE_ACTIVE_CAMERA="FALSE"/>
     <RmModelReference NAME="Model_1" API=""/>
     <RmRenderStateBlock NAME="Render State" API="D3D">
      <RmState NAME="D3DRS_COLORWRITEENABLE" API="D3D" STATE="168" VALUE="15" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ZFUNC" API="D3D" STATE="23" VALUE="3" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILENABLE" API="D3D" STATE="52" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILFAIL" API="D3D" STATE="53" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILFUNC" API="D3D" STATE="56" VALUE="6" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILREF" API="D3D" STATE="57" VALUE="0" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_CULLMODE" API="D3D" STATE="22" VALUE="3" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILPASS" API="D3D" STATE="55" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILZFAIL" API="D3D" STATE="54" VALUE="1" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmHLSLShader NAME="Vertex Shader" API="D3D" PIXEL_SHADER="FALSE" TARGET="vs_2_0" ENTRY_POINT="vs_main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float3 Pos_1;
float3 LightDir;
float4x4 matWorld;
float4x4 matViewProjection;

struct VS_INPUT 
{
   float3 Pos:        POSITION;
   float3 Normal:     NORMAL;
};

struct VS_OUTPUT 
{
   float4 Pos:     POSITION;
   float  Shade:   TEXCOORD0;
};

VS_OUTPUT vs_main( VS_INPUT In )
{
   VS_OUTPUT Out;

   float4x4 newWorldMat = matWorld;
   newWorldMat[0][3] = Pos_1.x;
   newWorldMat[1][3] = Pos_1.y;
   newWorldMat[2][3] = Pos_1.z;
   
   float4 Pos = mul(newWorldMat, float4(In.Pos,1.0)); 
   
   Out.Pos   = mul(matViewProjection, Pos);
   Out.Shade = max(dot(In.Normal,-normalize(LightDir)),0.4);

   return Out;
}



]]></RmShaderCode>
      <RmShaderConstant NAME="LightDir" API="" REGISTER="9"/>
      <RmShaderConstant NAME="Pos_1" API="" REGISTER="8"/>
      <RmShaderConstant NAME="matViewProjection" API="" REGISTER="4"/>
      <RmShaderConstant NAME="matWorld" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmHLSLShader NAME="Pixel Shader" API="D3D" PIXEL_SHADER="TRUE" TARGET="ps_2_0" ENTRY_POINT="ps_main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float4 Color_1;
struct PS_INPUT 
{
   float  Shade:   TEXCOORD0;
};

struct PS_OUTPUT
{
   float4 Color : COLOR0;
};

PS_OUTPUT ps_main( PS_INPUT In )
{
   PS_OUTPUT Out;
   Out.Color = Color_1 * In.Shade;
   return Out;
}



]]></RmShaderCode>
      <RmShaderConstant NAME="Color_1" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
    </RmPass>
    <RmPass NAME="Object B Color" API="D3D" PASS_INDEX="5" ENABLED="TRUE">
     <RmCameraReference NAME="Camera" API="" USE_ACTIVE_CAMERA="FALSE"/>
     <RmModelReference NAME="Model_2" API=""/>
     <RmRenderStateBlock NAME="Render State" API="D3D">
      <RmState NAME="D3DRS_STENCILENABLE" API="D3D" STATE="52" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILFAIL" API="D3D" STATE="53" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILPASS" API="D3D" STATE="55" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILFUNC" API="D3D" STATE="56" VALUE="3" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILZFAIL" API="D3D" STATE="54" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILREF" API="D3D" STATE="57" VALUE="0" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_CULLMODE" API="D3D" STATE="22" VALUE="2" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ZFUNC" API="D3D" STATE="23" VALUE="5" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmHLSLShader NAME="Vertex Shader" API="D3D" PIXEL_SHADER="FALSE" TARGET="vs_2_0" ENTRY_POINT="vs_main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float3 Pos_2;
float3 LightDir;
float4x4 matWorld;
float4x4 matViewProjection;

struct VS_INPUT 
{
   float3 Pos:        POSITION;
   float3 Normal:     NORMAL;
};

struct VS_OUTPUT 
{
   float4 Pos:     POSITION;
   float  Shade:   TEXCOORD0;
};

VS_OUTPUT vs_main( VS_INPUT In )
{
   VS_OUTPUT Out;

   float4x4 newWorldMat = matWorld;
   newWorldMat[0][3] = Pos_2.x;
   newWorldMat[1][3] = Pos_2.y;
   newWorldMat[2][3] = Pos_2.z;
   
   float4 Pos = mul(newWorldMat, float4(In.Pos,1.0)); 
   
   Out.Pos   = mul(matViewProjection, Pos);
   Out.Shade = max(dot(-In.Normal,-normalize(LightDir)),0.4);

   return Out;
}



]]></RmShaderCode>
      <RmShaderConstant NAME="LightDir" API="" REGISTER="9"/>
      <RmShaderConstant NAME="Pos_2" API="" REGISTER="8"/>
      <RmShaderConstant NAME="matViewProjection" API="" REGISTER="4"/>
      <RmShaderConstant NAME="matWorld" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmHLSLShader NAME="Pixel Shader" API="D3D" PIXEL_SHADER="TRUE" TARGET="ps_2_0" ENTRY_POINT="ps_main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float4 Color_1;
struct PS_INPUT 
{
   float  Shade:   TEXCOORD0;
};

struct PS_OUTPUT
{
   float4 Color : COLOR0;
};

PS_OUTPUT ps_main( PS_INPUT In )
{
   PS_OUTPUT Out;
   Out.Color = Color_1 * In.Shade;
   return Out;
}



]]></RmShaderCode>
      <RmShaderConstant NAME="Color_1" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
    </RmPass>
    <RmPass NAME="Object A Ghost" API="D3D" PASS_INDEX="6" ENABLED="TRUE">
     <RmCameraReference NAME="Camera" API="" USE_ACTIVE_CAMERA="FALSE"/>
     <RmModelReference NAME="Model_1" API=""/>
     <RmRenderStateBlock NAME="Render State" API="D3D">
      <RmState NAME="D3DRS_STENCILENABLE" API="D3D" STATE="52" VALUE="0" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILREF" API="D3D" STATE="57" VALUE="0" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_CULLMODE" API="D3D" STATE="22" VALUE="3" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ZFUNC" API="D3D" STATE="23" VALUE="2" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ZENABLE" API="D3D" STATE="7" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ZWRITEENABLE" API="D3D" STATE="14" VALUE="0" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ALPHABLENDENABLE" API="D3D" STATE="27" VALUE="0" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_FILLMODE" API="D3D" STATE="8" VALUE="2" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmHLSLShader NAME="Vertex Shader" API="D3D" PIXEL_SHADER="FALSE" TARGET="vs_2_0" ENTRY_POINT="vs_main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float3 Pos_1;
float3 LightDir;
float4x4 matWorld;
float4x4 matViewProjection;

struct VS_INPUT 
{
   float3 Pos:        POSITION;
   float3 Normal:     NORMAL;
};

struct VS_OUTPUT 
{
   float4 Pos:     POSITION;
   float  Shade:   TEXCOORD0;
};

VS_OUTPUT vs_main( VS_INPUT In )
{
   VS_OUTPUT Out;

   float4x4 newWorldMat = matWorld;
   newWorldMat[0][3] = Pos_1.x;
   newWorldMat[1][3] = Pos_1.y;
   newWorldMat[2][3] = Pos_1.z;
   
   float4 Pos = mul(newWorldMat, float4(In.Pos,1.0)); 
   
   Out.Pos   = mul(matViewProjection, Pos);
   Out.Shade = max(dot(-In.Normal,-normalize(LightDir)),0.4);

   return Out;
}



]]></RmShaderCode>
      <RmShaderConstant NAME="LightDir" API="" REGISTER="9"/>
      <RmShaderConstant NAME="Pos_1" API="" REGISTER="8"/>
      <RmShaderConstant NAME="matViewProjection" API="" REGISTER="4"/>
      <RmShaderConstant NAME="matWorld" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmHLSLShader NAME="Pixel Shader" API="D3D" PIXEL_SHADER="TRUE" TARGET="ps_2_0" ENTRY_POINT="ps_main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float4 Color_1;
struct PS_INPUT 
{
   float  Shade:   TEXCOORD0;
};

struct PS_OUTPUT
{
   float4 Color : COLOR0;
};

PS_OUTPUT ps_main( PS_INPUT In )
{
   PS_OUTPUT Out;
   Out.Color = Color_1 * In.Shade;
   return Out;
}



]]></RmShaderCode>
      <RmShaderConstant NAME="Color_1" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
    </RmPass>
    <RmPass NAME="Object B Ghost" API="D3D" PASS_INDEX="7" ENABLED="TRUE">
     <RmCameraReference NAME="Camera" API="" USE_ACTIVE_CAMERA="FALSE"/>
     <RmModelReference NAME="Model_2" API=""/>
     <RmRenderStateBlock NAME="Render State" API="D3D">
      <RmState NAME="D3DRS_STENCILENABLE" API="D3D" STATE="52" VALUE="0" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILREF" API="D3D" STATE="57" VALUE="0" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_CULLMODE" API="D3D" STATE="22" VALUE="3" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ZFUNC" API="D3D" STATE="23" VALUE="2" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ZENABLE" API="D3D" STATE="7" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ZWRITEENABLE" API="D3D" STATE="14" VALUE="0" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_SRCBLEND" API="D3D" STATE="19" VALUE="2" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmHLSLShader NAME="Vertex Shader" API="D3D" PIXEL_SHADER="FALSE" TARGET="vs_2_0" ENTRY_POINT="vs_main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float3 Pos_2;
float3 LightDir;
float4x4 matWorld;
float4x4 matViewProjection;

struct VS_INPUT 
{
   float3 Pos:        POSITION;
   float3 Normal:     NORMAL;
};

struct VS_OUTPUT 
{
   float4 Pos:     POSITION;
   float  Shade:   TEXCOORD0;
};

VS_OUTPUT vs_main( VS_INPUT In )
{
   VS_OUTPUT Out;

   float4x4 newWorldMat = matWorld;
   newWorldMat[0][3] = Pos_2.x;
   newWorldMat[1][3] = Pos_2.y;
   newWorldMat[2][3] = Pos_2.z;
   
   float4 Pos = mul(newWorldMat, float4(In.Pos,1.0)); 
   
   Out.Pos   = mul(matViewProjection, Pos);
   Out.Shade = max(dot(-In.Normal,-normalize(LightDir)),0.4);

   return Out;
}



]]></RmShaderCode>
      <RmShaderConstant NAME="LightDir" API="" REGISTER="9"/>
      <RmShaderConstant NAME="Pos_2" API="" REGISTER="8"/>
      <RmShaderConstant NAME="matViewProjection" API="" REGISTER="4"/>
      <RmShaderConstant NAME="matWorld" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmHLSLShader NAME="Pixel Shader" API="D3D" PIXEL_SHADER="TRUE" TARGET="ps_2_0" ENTRY_POINT="ps_main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float4 Color_2;
struct PS_INPUT 
{
   float  Shade:   TEXCOORD0;
};

struct PS_OUTPUT
{
   float4 Color : COLOR0;
};

PS_OUTPUT ps_main( PS_INPUT In )
{
   PS_OUTPUT Out;
   Out.Color = Color_2 * In.Shade;
   return Out;
}



]]></RmShaderCode>
      <RmShaderConstant NAME="Color_2" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
    </RmPass>
    <RmPass NAME="Object A_DepthOnly" API="D3D" PASS_INDEX="1" ENABLED="TRUE">
     <RmCameraReference NAME="Camera" API="" USE_ACTIVE_CAMERA="FALSE"/>
     <RmModelReference NAME="Model_1" API=""/>
     <RmRenderStateBlock NAME="Render State" API="D3D">
      <RmState NAME="D3DRS_ZENABLE" API="D3D" STATE="7" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ZFUNC" API="D3D" STATE="23" VALUE="2" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ZWRITEENABLE" API="D3D" STATE="14" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_COLORWRITEENABLE" API="D3D" STATE="168" VALUE="0" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_CULLMODE" API="D3D" STATE="22" VALUE="3" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmHLSLShader NAME="Vertex Shader" API="D3D" PIXEL_SHADER="FALSE" TARGET="vs_2_0" ENTRY_POINT="vs_main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float3 Pos_1;
float3 LightDir;
float4x4 matWorld;
float4x4 matViewProjection;

struct VS_INPUT 
{
   float3 Pos:        POSITION;
   float3 Normal:     NORMAL;
};

struct VS_OUTPUT 
{
   float4 Pos:     POSITION;
   float  Shade:   TEXCOORD0;
};

VS_OUTPUT vs_main( VS_INPUT In )
{
   VS_OUTPUT Out;

   float4x4 newWorldMat = matWorld;
   newWorldMat[0][3] = Pos_1.x;
   newWorldMat[1][3] = Pos_1.y;
   newWorldMat[2][3] = Pos_1.z;
   
   float4 Pos = mul(newWorldMat, float4(In.Pos,1.0)); 
   
   Out.Pos   = mul(matViewProjection, Pos);
   Out.Shade = dot(In.Normal,-normalize(LightDir));

   return Out;
}



]]></RmShaderCode>
      <RmShaderConstant NAME="LightDir" API="" REGISTER="9"/>
      <RmShaderConstant NAME="Pos_1" API="" REGISTER="8"/>
      <RmShaderConstant NAME="matViewProjection" API="" REGISTER="4"/>
      <RmShaderConstant NAME="matWorld" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmHLSLShader NAME="Pixel Shader" API="D3D" PIXEL_SHADER="TRUE" TARGET="ps_2_0" ENTRY_POINT="ps_main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float4 Color_1;
struct PS_INPUT 
{
   float  Shade:   TEXCOORD0;
};

struct PS_OUTPUT
{
   float4 Color : COLOR0;
};

PS_OUTPUT ps_main( PS_INPUT In )
{
   PS_OUTPUT Out;
   Out.Color = Color_1 * In.Shade;
   return Out;
}



]]></RmShaderCode>
      <RmShaderConstant NAME="Color_1" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
    </RmPass>
    <RmPass NAME="Environment" API="D3D" PASS_INDEX="0" ENABLED="TRUE">
     <RmCameraReference NAME="Camera" API="" USE_ACTIVE_CAMERA="FALSE"/>
     <RmModelReference NAME="Sphere" API=""/>
     <RmRenderStateBlock NAME="Render State" API="D3D">
      <RmState NAME="D3DRS_ZENABLE" API="D3D" STATE="7" VALUE="0" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_CULLMODE" API="D3D" STATE="22" VALUE="2" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ZWRITEENABLE" API="D3D" STATE="14" VALUE="0" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmHLSLShader NAME="Vertex Shader" API="D3D" PIXEL_SHADER="FALSE" TARGET="vs_1_1" ENTRY_POINT="vs_main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float4 vViewPosition;
float4x4 matViewProjection;

struct VS_OUTPUT 
{
   float4 Pos:      POSITION;
   float3 TexCoord: TEXCOORD;
};

VS_OUTPUT vs_main( float4 inPos: POSITION,
                   float3 inNormal: NORMAL )
{
   VS_OUTPUT Out;

   Out.Pos = mul(matViewProjection, inPos+vViewPosition);
   Out.TexCoord = inNormal;

   return Out;
}



]]></RmShaderCode>
      <RmShaderConstant NAME="matViewProjection" API="" REGISTER="0"/>
      <RmShaderConstant NAME="vViewPosition" API="" REGISTER="4"/>
     </RmHLSLShader>
     <RmHLSLShader NAME="Pixel Shader" API="D3D" PIXEL_SHADER="TRUE" TARGET="ps_2_0" ENTRY_POINT="ps_main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
samplerCUBE MarsTexture;

float4 ps_main( float3 inNormal: TEXCOORD ) : COLOR0
{
   //  Output constant color:
   float4 color = texCUBE(MarsTexture,inNormal);
   return color;
}



]]></RmShaderCode>
      <RmSampler NAME="MarsTexture" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmStreamMapReference NAME="Environment Stream Mapping" API=""/>
     <RmTextureObject NAME="MarsTexture" API="D3D" STATE_INDEX="0" VERTEX_TEXTURE="FALSE">
      <RmTextureReference NAME="Mars" API=""/>
     </RmTextureObject>
    </RmPass>
    <RmPass NAME="Object B_Front" API="D3D" PASS_INDEX="2" ENABLED="TRUE">
     <RmCameraReference NAME="Camera" API="" USE_ACTIVE_CAMERA="FALSE"/>
     <RmModelReference NAME="Model_2" API=""/>
     <RmRenderStateBlock NAME="Render State" API="D3D">
      <RmState NAME="D3DRS_STENCILENABLE" API="D3D" STATE="52" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILFAIL" API="D3D" STATE="53" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILPASS" API="D3D" STATE="55" VALUE="7" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILFUNC" API="D3D" STATE="56" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILZFAIL" API="D3D" STATE="54" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILREF" API="D3D" STATE="57" VALUE="0" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_ZWRITEENABLE" API="D3D" STATE="14" VALUE="0" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_CULLMODE" API="D3D" STATE="22" VALUE="3" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmHLSLShader NAME="Vertex Shader" API="D3D" PIXEL_SHADER="FALSE" TARGET="vs_2_0" ENTRY_POINT="vs_main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float3 Pos_2;
float3 LightDir;
float4x4 matWorld;
float4x4 matViewProjection;

struct VS_INPUT 
{
   float3 Pos:        POSITION;
   float3 Normal:     NORMAL;
};

struct VS_OUTPUT 
{
   float4 Pos:     POSITION;
   float  Shade:   TEXCOORD0;
};

VS_OUTPUT vs_main( VS_INPUT In )
{
   VS_OUTPUT Out;

   float4x4 newWorldMat = matWorld;
   newWorldMat[0][3] = Pos_2.x;
   newWorldMat[1][3] = Pos_2.y;
   newWorldMat[2][3] = Pos_2.z;
   
   float4 Pos = mul(newWorldMat, float4(In.Pos,1.0)); 
   
   Out.Pos   = mul(matViewProjection, Pos);
   Out.Shade = dot(In.Normal,-normalize(LightDir));

   return Out;
}



]]></RmShaderCode>
      <RmShaderConstant NAME="LightDir" API="" REGISTER="9"/>
      <RmShaderConstant NAME="Pos_2" API="" REGISTER="8"/>
      <RmShaderConstant NAME="matViewProjection" API="" REGISTER="4"/>
      <RmShaderConstant NAME="matWorld" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmHLSLShader NAME="Pixel Shader" API="D3D" PIXEL_SHADER="TRUE" TARGET="ps_2_0" ENTRY_POINT="ps_main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float4 Color_2;
struct PS_INPUT 
{
   float  Shade:   TEXCOORD0;
};

struct PS_OUTPUT
{
   float4 Color : COLOR0;
};

PS_OUTPUT ps_main( PS_INPUT In )
{
   PS_OUTPUT Out;
   Out.Color = Color_2 * In.Shade;
   return Out;
}



]]></RmShaderCode>
      <RmShaderConstant NAME="Color_2" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
    </RmPass>
    <RmPass NAME="Object B_Back" API="D3D" PASS_INDEX="3" ENABLED="TRUE">
     <RmCameraReference NAME="Camera" API="" USE_ACTIVE_CAMERA="FALSE"/>
     <RmModelReference NAME="Model_2" API=""/>
     <RmRenderStateBlock NAME="Render State" API="D3D">
      <RmState NAME="D3DRS_STENCILENABLE" API="D3D" STATE="52" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILFAIL" API="D3D" STATE="53" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILPASS" API="D3D" STATE="55" VALUE="5" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILFUNC" API="D3D" STATE="56" VALUE="8" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILZFAIL" API="D3D" STATE="54" VALUE="1" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_STENCILREF" API="D3D" STATE="57" VALUE="0" USAGE="RENDER_STATE"/>
      <RmState NAME="D3DRS_CULLMODE" API="D3D" STATE="22" VALUE="2" USAGE="RENDER_STATE"/>
     </RmRenderStateBlock>
     <RmHLSLShader NAME="Vertex Shader" API="D3D" PIXEL_SHADER="FALSE" TARGET="vs_2_0" ENTRY_POINT="vs_main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float3 Pos_2;
float3 LightDir;
float4x4 matWorld;
float4x4 matViewProjection;

struct VS_INPUT 
{
   float3 Pos:        POSITION;
   float3 Normal:     NORMAL;
};

struct VS_OUTPUT 
{
   float4 Pos:     POSITION;
   float  Shade:   TEXCOORD0;
};

VS_OUTPUT vs_main( VS_INPUT In )
{
   VS_OUTPUT Out;

   float4x4 newWorldMat = matWorld;
   newWorldMat[0][3] = Pos_2.x;
   newWorldMat[1][3] = Pos_2.y;
   newWorldMat[2][3] = Pos_2.z;
   
   float4 Pos = mul(newWorldMat, float4(In.Pos,1.0)); 
   
   Out.Pos   = mul(matViewProjection, Pos);
   Out.Shade = dot(In.Normal,-normalize(LightDir));

   return Out;
}



]]></RmShaderCode>
      <RmShaderConstant NAME="LightDir" API="" REGISTER="9"/>
      <RmShaderConstant NAME="Pos_2" API="" REGISTER="8"/>
      <RmShaderConstant NAME="matViewProjection" API="" REGISTER="4"/>
      <RmShaderConstant NAME="matWorld" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmHLSLShader NAME="Pixel Shader" API="D3D" PIXEL_SHADER="TRUE" TARGET="ps_2_0" ENTRY_POINT="ps_main" COMPILER_FLAGS="32"><RmShaderCode TYPE="TEXT"><![CDATA[
float4 Color_2;
struct PS_INPUT 
{
   float  Shade:   TEXCOORD0;
};

struct PS_OUTPUT
{
   float4 Color : COLOR0;
};

PS_OUTPUT ps_main( PS_INPUT In )
{
   PS_OUTPUT Out;
   Out.Color = Color_2 * In.Shade;
   return Out;
}



]]></RmShaderCode>
      <RmShaderConstant NAME="Color_2" API="" REGISTER="0"/>
     </RmHLSLShader>
     <RmStreamMapReference NAME="Stream Mapping" API=""/>
    </RmPass>
   </RmDirectXEffect>
   <RmVectorVariable NAME="vViewPosition" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="ViewPosition" VALUE_0="-12.933925" VALUE_1="52.631313" VALUE_2="192.516266" VALUE_3="1.000000" MIN="-10.000000" MAX="10.000000" CLAMP="FALSE" NORMALIZE="FALSE"/>
   <RmDynamicVariable NAME="LightDir" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VARIABLE_TYPE="FLOAT" ROWS="3" COLUMNS="1" FIXED_SIZE="TRUE" MIN="-1.000000" MAX="1.000000" CLAMP="TRUE" NORMALIZE="FALSE">
    <RmDynamicVariableValueContainer>
     <RmDynamicVariableValue ROW_INDEX="0" COLUMN_INDEX="0" VALUE="0.520000"/>
     <RmDynamicVariableValue ROW_INDEX="1" COLUMN_INDEX="0" VALUE="-0.940000"/>
     <RmDynamicVariableValue ROW_INDEX="2" COLUMN_INDEX="0" VALUE="-1.000000"/>
    </RmDynamicVariableValueContainer>
   </RmDynamicVariable>
   <RmDynamicVariable NAME="Pos_1" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VARIABLE_TYPE="FLOAT" ROWS="3" COLUMNS="1" FIXED_SIZE="TRUE" MIN="-100.000000" MAX="100.000000" CLAMP="TRUE" NORMALIZE="FALSE">
    <RmDynamicVariableValueContainer>
     <RmDynamicVariableValue ROW_INDEX="0" COLUMN_INDEX="0" VALUE="0.000000"/>
     <RmDynamicVariableValue ROW_INDEX="1" COLUMN_INDEX="0" VALUE="0.000000"/>
     <RmDynamicVariableValue ROW_INDEX="2" COLUMN_INDEX="0" VALUE="0.000000"/>
    </RmDynamicVariableValueContainer>
   </RmDynamicVariable>
   <RmDynamicVariable NAME="Pos_2" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" VARIABLE_TYPE="FLOAT" ROWS="3" COLUMNS="1" FIXED_SIZE="TRUE" MIN="-100.000000" MAX="100.000000" CLAMP="TRUE" NORMALIZE="FALSE">
    <RmDynamicVariableValueContainer>
     <RmDynamicVariableValue ROW_INDEX="0" COLUMN_INDEX="0" VALUE="15.999997"/>
     <RmDynamicVariableValue ROW_INDEX="1" COLUMN_INDEX="0" VALUE="15.999997"/>
     <RmDynamicVariableValue ROW_INDEX="2" COLUMN_INDEX="0" VALUE="29.999996"/>
    </RmDynamicVariableValueContainer>
   </RmDynamicVariable>
   <RmMatrixVariable NAME="matWorld" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="World" VALUE_0="1.000000" VALUE_1="0.000000" VALUE_2="0.000000" VALUE_3="0.000000" VALUE_4="0.000000" VALUE_5="1.000000" VALUE_6="0.000000" VALUE_7="0.000000" VALUE_8="0.000000" VALUE_9="0.000000" VALUE_10="1.000000" VALUE_11="0.000000" VALUE_12="0.000000" VALUE_13="0.000000" VALUE_14="0.000000" VALUE_15="1.000000"/>
   <RmMatrixVariable NAME="matViewProjection" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="ViewProjection" VALUE_0="-2.438233" VALUE_1="-0.034380" VALUE_2="-0.154410" VALUE_3="-0.000001" VALUE_4="0.007450" VALUE_5="2.328873" VALUE_6="-0.636179" VALUE_7="-0.000482" VALUE_8="0.064734" VALUE_9="-0.263420" VALUE_10="-0.963547" VALUE_11="199.198853" VALUE_12="0.064670" VALUE_13="-0.263157" VALUE_14="-0.962583" VALUE_15="199.999649"/>
   <RmColorVariable NAME="Color_1" API="" ARTIST_EDITABLE="TRUE" VARIABLE_SEMANTIC="" VALUE_0="0.570001" VALUE_1="1.000000" VALUE_2="0.491382" VALUE_3="1.000000"/>
   <RmColorVariable NAME="Color_2" API="" ARTIST_EDITABLE="TRUE" VARIABLE_SEMANTIC="" VALUE_0="0.453607" VALUE_1="0.563697" VALUE_2="1.000000" VALUE_3="1.000000"/>
   <RmCubemapVariable NAME="Mars" API="" ARTIST_EDITABLE="FALSE" VARIABLE_SEMANTIC="" FILE_NAME="..\Media\Textures\Mars.dds" ORIGIN="0"/>
   <RmStreamMap NAME="Stream Mapping" API="">
    <RmStream NAME="Stream" API="" STRIDE="24">
     <RmStreamChannel NAME="Position_0" API="" DATA_SIZE="12" DATA_TYPE="2" REGISTER="0" USAGE="0" USAGE_INDEX="0" ATTRIBUTE_NAME="rm_Vertex"/>
     <RmStreamChannel NAME="Normal_0" API="" DATA_SIZE="12" DATA_TYPE="2" REGISTER="0" USAGE="3" USAGE_INDEX="0" ATTRIBUTE_NAME="rm_Normal"/>
    </RmStream>
   </RmStreamMap>
   <RmStreamMap NAME="Environment Stream Mapping" API="">
    <RmStream NAME="Stream 0" API="" STRIDE="24">
     <RmStreamChannel NAME="Position_0" API="" DATA_SIZE="12" DATA_TYPE="2" REGISTER="0" USAGE="0" USAGE_INDEX="0" ATTRIBUTE_NAME="rm_Vertex"/>
     <RmStreamChannel NAME="Normal_0" API="" DATA_SIZE="12" DATA_TYPE="2" REGISTER="0" USAGE="3" USAGE_INDEX="0" ATTRIBUTE_NAME="rm_Normal"/>
    </RmStream>
   </RmStreamMap>
   <RmModelData NAME="Model_1" API="" FILE_NAME="..\Media\Models\ElephantBody.3ds" ORIENTATION="0"/>
   <RmModelData NAME="Model_2" API="" FILE_NAME="" ORIENTATION="0">
    <RmPlugInData NAME="SphereData" API="" PLUGIN_GUID="35ea14d9-fc6d-4bbd-9fe5-159accd679ab"><RmTextDataBlock TYPE="TEXT"><![CDATA[
Generated sphere model with parameters: radius in X = 25.000000, radius in y = 25.000000, radius in z = 25.000000, 
 horizontal segments = 32, vertical segments = 16
]]></RmTextDataBlock></RmPlugInData>
   </RmModelData>
   <RmModelData NAME="Sphere" API="" FILE_NAME="" ORIENTATION="0">
    <RmPlugInData NAME="SphereData" API="" PLUGIN_GUID="35ea14d9-fc6d-4bbd-9fe5-159accd679ab"><RmTextDataBlock TYPE="TEXT"><![CDATA[
Generated sphere model with parameters: radius in X = 400.000000, radius in y = 400.000000, radius in z = 400.000000, 
 horizontal segments = 32, vertical segments = 16
]]></RmTextDataBlock></RmPlugInData>
   </RmModelData>
  </RmEffectGroup>
 </RmEffectWorkspace>
</RENDER_MONKEY>
