vs.1.0                  // version instruction

// in
; v0 - vertex pos
; v1 - normal
; v2 - texture coordination
; v3 - tangent
; v4 - binormal
; v5.xyz - center of triangle
; v5.w - radius for triangle

; c0-c3 - composite transform matrix
; c4 - eye pos in object space
; c5 - 0.5, 0.5, 0.5, 0.0
; c6.xyz - light position in object space
; c6.w - 1.f/light range
; c7 - 1, -1, 1, 1

// out
; t0 - base
; t1 - normal map
; t2 - H with cube map normalizer
; t3 - L for attenuation
; v0 - L

add  r0, v5, -c6        // ct - L
dp3  r0.w, r0, r0       // distance^2

add  r0.w, r0.w, -v5.w  // distance2 - radius2_for_triangle
slt  r2, r0.w, c7.w     // distance2 - radius2_for_triangle < light_range2
mul  r0, v0, r2

m4x4 oPos, r0, c0       // transform vertices by view/projection matrix

// v2 texture coordination
mov  oT0.xy, v2         // base
mov  oT1.xy, v2         // normal

// Light Direction
add  r0, c6, -v0        // L = lpos - vertex, L in object space

// v3 Tangent,  x
// v4 Binormal, y
// v1 normal,   z

// matrix for Object Space to Tangent Space
// ( Tan.x  Tan.y  Tan.z ) = ( v3.x v3.y v3.z )   ( L.x )
// ( Bin.x  Bin.y  Bin.z ) = ( v4.x v4.y v4.z ) * ( L.y )
// ( nor.x  nor.y  nor.z ) = ( v1.x v1.y v1.z )   ( L.z )

dp3  r1.x, v3, r0
dp3  r1.y, v4, r0
dp3  r1.z, v1, r0

// normalize vector in r1
dp3  r1.w, r1, r1       // r1.w = |r1|^2
rsq  r1.w, r1.w         // r1.w = 1/sqrt(r0.w) = 1/|r1|
mul  r2.xyz, r1, r1.w   // r1 - normalized L vector in texture space

mad  r1.xyz, r2, c5, c5 // [-1,1] => [0,1]
mov  oD0.xyz, r1        // Tangent Space Light Direction

// Halfangle vector
// lpos = r2
// c4 eye
// H = HalfVector = Normalize( VertexToEyeVector + LightVector ) = Norm( V + L )

add  r0, c4, -v0        // V = VertexToEyeVector = eye - vertex
// V to Tangent Space
dp3  r1.x, v3, r0
dp3  r1.y, v4, r0
dp3  r1.z, v1, r0

// normalize vector in r1
dp3  r1.w, r1, r1       // r1.w = |r1|^2
rsq  r1.w, r1.w         // r1.w = 1/sqrt(r0.w) = 1/|r1|
mul  r1.xyz, r1, r1.w   // r1 - normalized V vector in Tangent Space

add  r1.xyz, r1, r2     // HalfVector = V + L, in Tangent Space

mov  oT2.xyz, r1        // Cubic Normalized Tangent Space Halfangle vector

//attenuation
add  r0, c6, -v0        // L = lpos - vertex, L in object space
mul  r0, r0, c6.w       // L/light_range
mad  r1.xyz, r0, c5, c5 // [-1,1] => [0,1]
mov  oT3.xyz, r1
