vs.1.1                  // version instruction

// in
; v0 - vertex pos
; v1 - normal
; v2 - texture coordination
; v3 - tangent
; v4 - binormal
; v5.x - address to light

; c0-c3 - composite transform matrix
; c4 - eye pos in object space
; c5 - 0.5, 0.5, 0.5, 0.0

// out
; t0 - base & normal & height
; t2 - L for attenuation
; t3 - L
; t4 - H
; t5 - eye

m4x4 oPos, v0, c0       // transform vertices by view/projection matrix

// v2 texture coordination
mov  oT0.xy, v2         // base

// c[a0.x+0].xyz = light position in object space
// c[a0.x+0].w = 1.f/light range
// c[a0.x+1] = light color

mov a0.x, v5.x

// Light Direction
add  r0, c[a0.x+0], -v0  // L = lpos - vertex, L in object space

// v3 Tangent,  x
// v4 Binormal, y
// v1 normal,   z

// matrix for Object Space to Tangent Space
// ( Tan.x  Tan.y  Tan.z ) = ( v3.x v3.y v3.z )   ( L.x )
// ( Bin.x  Bin.y  Bin.z ) = ( v4.x v4.y v4.z ) * ( L.y )
// ( nor.x  nor.y  nor.z ) = ( v1.x v1.y v1.z )   ( L.z )

dp3  r1.x, v3, r0
dp3  r1.y, v4, r0
dp3  r1.z, v1, r0

// normalize vector in r1
dp3  r1.w, r1, r1       // r1.w = |r1|^2
rsq  r1.w, r1.w         // r1.w = 1/sqrt(r0.w) = 1/|r1|
mul  r2.xyz, r1, r1.w   // r1 - normalized L vector in texture space

mov  oT3.xyz, r2        // Tangent Space Light Direction

// Halfangle vector
// lpos = r2
// c4 eye
// H = HalfVector = Normalize( VertexToEyeVector + LightVector ) = Norm( V + L )

add  r0, c4, -v0        // V = VertexToEyeVector = eye - vertex
// V to Tangent Space
dp3  r1.x, v3, r0
dp3  r1.y, v4, r0
dp3  r1.z, v1, r0

// normalize vector in r1
dp3  r1.w, r1, r1       // r1.w = |r1|^2
rsq  r1.w, r1.w         // r1.w = 1/sqrt(r0.w) = 1/|r1|
mul  r1.xyz, r1, r1.w   // r1 - normalized V vector in Tangent Space

mov  r3, r1
mov  r3.y, -r3.y
mov  oT5.xyz, r3        // eye vector for offset mapping, c7 = 1,-1,1

add  r1.xyz, r1, r2     // HalfVector = V + L, in Tangent Space

mov  oT4.xyz, r1        // Cubic Normalized Tangent Space Halfangle vector

//attenuation
add  r0.xyz, c[a0.x+0], -v0   // L = lpos - vertex, L in object space
mul  r0.xyz, r0, c[a0.x+0].w  // L/light_range
mov  oT2.xyz, r0              // L for attenuation

mov  oD1.xyz, c[a0.x+1]    // light color
